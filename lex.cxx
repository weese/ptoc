
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef yyconst struct yy_trans_info *yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 61
#define YY_END_OF_BUFFER 62
struct yy_trans_info
	{
	flex_int16_t yy_verify;
	flex_int16_t yy_nxt;
	};
static yyconst struct yy_trans_info yy_transition[7001] =
    {
 {   0,   0 }, {   0,6745 }, {   0,   0 }, {   0,6743 }, {   1,1548 },
 {   2,1548 }, {   3,1548 }, {   4,1548 }, {   5,1548 }, {   6,1548 },
 {   7,1548 }, {   8,1548 }, {   9,1550 }, {  10,1552 }, {  11,1548 },
 {  12,1550 }, {  13,1548 }, {  14,1548 }, {  15,1548 }, {  16,1548 },
 {  17,1548 }, {  18,1548 }, {  19,1548 }, {  20,1548 }, {  21,1548 },
 {  22,1548 }, {  23,1548 }, {  24,1548 }, {  25,1548 }, {  26,1548 },
 {  27,1548 }, {  28,1548 }, {  29,1548 }, {  30,1548 }, {  31,1548 },
 {  32,1550 }, {  33,1548 }, {  34,1548 }, {  35,1554 }, {  36,1565 },
 {  37,1556 }, {  38,1567 }, {  39,1689 }, {  40,1947 }, {  41,1949 },
 {  42,1951 }, {  43,1953 }, {  44,1955 }, {  45,1957 }, {  46,1959 },

 {  47,1961 }, {  48,1975 }, {  49,2034 }, {  50,2034 }, {  51,2034 },
 {  52,2034 }, {  53,2034 }, {  54,2034 }, {  55,2034 }, {  56,2034 },
 {  57,2034 }, {  58,1977 }, {  59,1979 }, {  60,1988 }, {  61,1991 },
 {  62,1995 }, {  63,1548 }, {  64,1997 }, {  65,1565 }, {  66,1565 },
 {  67,1565 }, {  68,1565 }, {  69,1565 }, {  70,1565 }, {  71,1565 },
 {  72,1565 }, {  73,1565 }, {  74,1565 }, {  75,1565 }, {  76,1565 },
 {  77,1565 }, {  78,1565 }, {  79,1565 }, {  80,1565 }, {  81,1565 },
 {  82,1565 }, {  83,1565 }, {  84,1565 }, {  85,2093 }, {  86,1565 },
 {  87,1565 }, {  88,1565 }, {  89,1565 }, {  90,1565 }, {  91,1999 },
 {  92,1548 }, {  93,2002 }, {  94,2004 }, {  95,1565 }, {  96,1548 },

 {  97,1565 }, {  98,1565 }, {  99,1565 }, { 100,1565 }, { 101,1565 },
 { 102,1565 }, { 103,1565 }, { 104,1565 }, { 105,1565 }, { 106,1565 },
 { 107,1565 }, { 108,1565 }, { 109,1565 }, { 110,1565 }, { 111,1565 },
 { 112,1565 }, { 113,1565 }, { 114,1565 }, { 115,1565 }, { 116,1565 },
 { 117,2093 }, { 118,1565 }, { 119,1565 }, { 120,1565 }, { 121,1565 },
 { 122,1565 }, { 123,2016 }, { 124,2020 }, { 125,1548 }, { 126,2036 },
 { 127,1548 }, { 128,1548 }, { 129,1548 }, { 130,1548 }, { 131,1548 },
 { 132,1548 }, { 133,1548 }, { 134,1548 }, { 135,1548 }, { 136,1548 },
 { 137,1548 }, { 138,1548 }, { 139,1548 }, { 140,1548 }, { 141,1548 },
 { 142,1548 }, { 143,1548 }, { 144,1548 }, { 145,1548 }, { 146,1548 },

 { 147,1548 }, { 148,1548 }, { 149,1548 }, { 150,1548 }, { 151,1548 },
 { 152,1548 }, { 153,1548 }, { 154,1548 }, { 155,1548 }, { 156,1548 },
 { 157,1548 }, { 158,1548 }, { 159,1548 }, { 160,1548 }, { 161,1548 },
 { 162,1548 }, { 163,1548 }, { 164,1548 }, { 165,1548 }, { 166,1548 },
 { 167,1548 }, { 168,1548 }, { 169,1548 }, { 170,1548 }, { 171,1548 },
 { 172,1548 }, { 173,1548 }, { 174,1548 }, { 175,1548 }, { 176,1548 },
 { 177,1548 }, { 178,1548 }, { 179,1548 }, { 180,1548 }, { 181,1548 },
 { 182,1548 }, { 183,1548 }, { 184,1548 }, { 185,1548 }, { 186,1548 },
 { 187,1548 }, { 188,1548 }, { 189,1548 }, { 190,1548 }, { 191,1548 },
 { 192,1548 }, { 193,1548 }, { 194,1548 }, { 195,1548 }, { 196,1548 },

 { 197,1548 }, { 198,1548 }, { 199,1548 }, { 200,1548 }, { 201,1548 },
 { 202,1548 }, { 203,1548 }, { 204,1548 }, { 205,1548 }, { 206,1548 },
 { 207,1548 }, { 208,1548 }, { 209,1548 }, { 210,1548 }, { 211,1548 },
 { 212,1548 }, { 213,1548 }, { 214,1548 }, { 215,1548 }, { 216,1548 },
 { 217,1548 }, { 218,1548 }, { 219,1548 }, { 220,1548 }, { 221,1548 },
 { 222,1548 }, { 223,1548 }, { 224,1548 }, { 225,1548 }, { 226,1548 },
 { 227,1548 }, { 228,1548 }, { 229,1548 }, { 230,1548 }, { 231,1548 },
 { 232,1548 }, { 233,1548 }, { 234,1548 }, { 235,1548 }, { 236,1548 },
 { 237,1548 }, { 238,1548 }, { 239,1548 }, { 240,1548 }, { 241,1548 },
 { 242,1548 }, { 243,1548 }, { 244,1548 }, { 245,1548 }, { 246,1548 },

 { 247,1548 }, { 248,1548 }, { 249,1548 }, { 250,1548 }, { 251,1548 },
 { 252,1548 }, { 253,1548 }, { 254,1548 }, { 255,1548 }, { 256,1548 },
 {   0,   0 }, {   0,6485 }, {   1,1290 }, {   2,1290 }, {   3,1290 },
 {   4,1290 }, {   5,1290 }, {   6,1290 }, {   7,1290 }, {   8,1290 },
 {   9,1292 }, {  10,1294 }, {  11,1290 }, {  12,1292 }, {  13,1290 },
 {  14,1290 }, {  15,1290 }, {  16,1290 }, {  17,1290 }, {  18,1290 },
 {  19,1290 }, {  20,1290 }, {  21,1290 }, {  22,1290 }, {  23,1290 },
 {  24,1290 }, {  25,1290 }, {  26,1290 }, {  27,1290 }, {  28,1290 },
 {  29,1290 }, {  30,1290 }, {  31,1290 }, {  32,1292 }, {  33,1290 },
 {  34,1290 }, {  35,1296 }, {  36,1307 }, {  37,1298 }, {  38,1309 },

 {  39,1431 }, {  40,1689 }, {  41,1691 }, {  42,1693 }, {  43,1695 },
 {  44,1697 }, {  45,1699 }, {  46,1701 }, {  47,1703 }, {  48,1717 },
 {  49,1776 }, {  50,1776 }, {  51,1776 }, {  52,1776 }, {  53,1776 },
 {  54,1776 }, {  55,1776 }, {  56,1776 }, {  57,1776 }, {  58,1719 },
 {  59,1721 }, {  60,1730 }, {  61,1733 }, {  62,1737 }, {  63,1290 },
 {  64,1739 }, {  65,1307 }, {  66,1307 }, {  67,1307 }, {  68,1307 },
 {  69,1307 }, {  70,1307 }, {  71,1307 }, {  72,1307 }, {  73,1307 },
 {  74,1307 }, {  75,1307 }, {  76,1307 }, {  77,1307 }, {  78,1307 },
 {  79,1307 }, {  80,1307 }, {  81,1307 }, {  82,1307 }, {  83,1307 },
 {  84,1307 }, {  85,1835 }, {  86,1307 }, {  87,1307 }, {  88,1307 },

 {  89,1307 }, {  90,1307 }, {  91,1741 }, {  92,1290 }, {  93,1744 },
 {  94,1746 }, {  95,1307 }, {  96,1290 }, {  97,1307 }, {  98,1307 },
 {  99,1307 }, { 100,1307 }, { 101,1307 }, { 102,1307 }, { 103,1307 },
 { 104,1307 }, { 105,1307 }, { 106,1307 }, { 107,1307 }, { 108,1307 },
 { 109,1307 }, { 110,1307 }, { 111,1307 }, { 112,1307 }, { 113,1307 },
 { 114,1307 }, { 115,1307 }, { 116,1307 }, { 117,1835 }, { 118,1307 },
 { 119,1307 }, { 120,1307 }, { 121,1307 }, { 122,1307 }, { 123,1758 },
 { 124,1762 }, { 125,1290 }, { 126,1778 }, { 127,1290 }, { 128,1290 },
 { 129,1290 }, { 130,1290 }, { 131,1290 }, { 132,1290 }, { 133,1290 },
 { 134,1290 }, { 135,1290 }, { 136,1290 }, { 137,1290 }, { 138,1290 },

 { 139,1290 }, { 140,1290 }, { 141,1290 }, { 142,1290 }, { 143,1290 },
 { 144,1290 }, { 145,1290 }, { 146,1290 }, { 147,1290 }, { 148,1290 },
 { 149,1290 }, { 150,1290 }, { 151,1290 }, { 152,1290 }, { 153,1290 },
 { 154,1290 }, { 155,1290 }, { 156,1290 }, { 157,1290 }, { 158,1290 },
 { 159,1290 }, { 160,1290 }, { 161,1290 }, { 162,1290 }, { 163,1290 },
 { 164,1290 }, { 165,1290 }, { 166,1290 }, { 167,1290 }, { 168,1290 },
 { 169,1290 }, { 170,1290 }, { 171,1290 }, { 172,1290 }, { 173,1290 },
 { 174,1290 }, { 175,1290 }, { 176,1290 }, { 177,1290 }, { 178,1290 },
 { 179,1290 }, { 180,1290 }, { 181,1290 }, { 182,1290 }, { 183,1290 },
 { 184,1290 }, { 185,1290 }, { 186,1290 }, { 187,1290 }, { 188,1290 },

 { 189,1290 }, { 190,1290 }, { 191,1290 }, { 192,1290 }, { 193,1290 },
 { 194,1290 }, { 195,1290 }, { 196,1290 }, { 197,1290 }, { 198,1290 },
 { 199,1290 }, { 200,1290 }, { 201,1290 }, { 202,1290 }, { 203,1290 },
 { 204,1290 }, { 205,1290 }, { 206,1290 }, { 207,1290 }, { 208,1290 },
 { 209,1290 }, { 210,1290 }, { 211,1290 }, { 212,1290 }, { 213,1290 },
 { 214,1290 }, { 215,1290 }, { 216,1290 }, { 217,1290 }, { 218,1290 },
 { 219,1290 }, { 220,1290 }, { 221,1290 }, { 222,1290 }, { 223,1290 },
 { 224,1290 }, { 225,1290 }, { 226,1290 }, { 227,1290 }, { 228,1290 },
 { 229,1290 }, { 230,1290 }, { 231,1290 }, { 232,1290 }, { 233,1290 },
 { 234,1290 }, { 235,1290 }, { 236,1290 }, { 237,1290 }, { 238,1290 },

 { 239,1290 }, { 240,1290 }, { 241,1290 }, { 242,1290 }, { 243,1290 },
 { 244,1290 }, { 245,1290 }, { 246,1290 }, { 247,1290 }, { 248,1290 },
 { 249,1290 }, { 250,1290 }, { 251,1290 }, { 252,1290 }, { 253,1290 },
 { 254,1290 }, { 255,1290 }, { 256,1290 }, {   0,   9 }, {   0,6227 },
 {   1,1701 }, {   2,1701 }, {   3,1701 }, {   4,1701 }, {   5,1701 },
 {   6,1701 }, {   7,1701 }, {   8,1701 }, {   9,1959 }, {  10,1582 },
 {  11,1701 }, {  12,1701 }, {  13,1701 }, {  14,1701 }, {  15,1701 },
 {  16,1701 }, {  17,1701 }, {  18,1701 }, {  19,1701 }, {  20,1701 },
 {  21,1701 }, {  22,1701 }, {  23,1701 }, {  24,1701 }, {  25,1701 },
 {  26,1701 }, {  27,1701 }, {  28,1701 }, {  29,1701 }, {  30,1701 },

 {  31,1701 }, {  32,1959 }, {  33,1701 }, {  34,1701 }, {  35,1701 },
 {  36,1701 }, {  37,1701 }, {  38,1701 }, {  39,1701 }, {  40,1701 },
 {  41,1701 }, {  42,1701 }, {  43,1701 }, {  44,1701 }, {  45,1701 },
 {  46,1701 }, {  47,1701 }, {  48,1701 }, {  49,1701 }, {  50,1701 },
 {  51,1701 }, {  52,1701 }, {  53,1701 }, {  54,1701 }, {  55,1701 },
 {  56,1701 }, {  57,1701 }, {  58,1701 }, {  59,1594 }, {  60,1701 },
 {  61,1701 }, {  62,1701 }, {  63,1701 }, {  64,1701 }, {  65,1701 },
 {  66,1701 }, {  67,1701 }, {  68,1701 }, {  69,1701 }, {  70,1701 },
 {  71,1701 }, {  72,1701 }, {  73,1701 }, {  74,1701 }, {  75,1701 },
 {  76,1701 }, {  77,1701 }, {  78,1701 }, {  79,1701 }, {  80,1701 },

 {  81,1701 }, {  82,1701 }, {  83,1701 }, {  84,1701 }, {  85,1701 },
 {  86,1701 }, {  87,1701 }, {  88,1701 }, {  89,1701 }, {  90,1701 },
 {  91,1701 }, {  92,1701 }, {  93,1701 }, {  94,1701 }, {  95,1701 },
 {  96,1701 }, {  97,1701 }, {  98,1701 }, {  99,1701 }, { 100,1701 },
 { 101,1701 }, { 102,1701 }, { 103,1701 }, { 104,1701 }, { 105,1701 },
 { 106,1701 }, { 107,1701 }, { 108,1701 }, { 109,1701 }, { 110,1701 },
 { 111,1701 }, { 112,1701 }, { 113,1701 }, { 114,1701 }, { 115,1701 },
 { 116,1701 }, { 117,1701 }, { 118,1701 }, { 119,1701 }, { 120,1701 },
 { 121,1701 }, { 122,1701 }, { 123,1701 }, { 124,1701 }, { 125,1701 },
 { 126,1701 }, { 127,1701 }, { 128,1701 }, { 129,1701 }, { 130,1701 },

 { 131,1701 }, { 132,1701 }, { 133,1701 }, { 134,1701 }, { 135,1701 },
 { 136,1701 }, { 137,1701 }, { 138,1701 }, { 139,1701 }, { 140,1701 },
 { 141,1701 }, { 142,1701 }, { 143,1701 }, { 144,1701 }, { 145,1701 },
 { 146,1701 }, { 147,1701 }, { 148,1701 }, { 149,1701 }, { 150,1701 },
 { 151,1701 }, { 152,1701 }, { 153,1701 }, { 154,1701 }, { 155,1701 },
 { 156,1701 }, { 157,1701 }, { 158,1701 }, { 159,1701 }, { 160,1701 },
 { 161,1701 }, { 162,1701 }, { 163,1701 }, { 164,1701 }, { 165,1701 },
 { 166,1701 }, { 167,1701 }, { 168,1701 }, { 169,1701 }, { 170,1701 },
 { 171,1701 }, { 172,1701 }, { 173,1701 }, { 174,1701 }, { 175,1701 },
 { 176,1701 }, { 177,1701 }, { 178,1701 }, { 179,1701 }, { 180,1701 },

 { 181,1701 }, { 182,1701 }, { 183,1701 }, { 184,1701 }, { 185,1701 },
 { 186,1701 }, { 187,1701 }, { 188,1701 }, { 189,1701 }, { 190,1701 },
 { 191,1701 }, { 192,1701 }, { 193,1701 }, { 194,1701 }, { 195,1701 },
 { 196,1701 }, { 197,1701 }, { 198,1701 }, { 199,1701 }, { 200,1701 },
 { 201,1701 }, { 202,1701 }, { 203,1701 }, { 204,1701 }, { 205,1701 },
 { 206,1701 }, { 207,1701 }, { 208,1701 }, { 209,1701 }, { 210,1701 },
 { 211,1701 }, { 212,1701 }, { 213,1701 }, { 214,1701 }, { 215,1701 },
 { 216,1701 }, { 217,1701 }, { 218,1701 }, { 219,1701 }, { 220,1701 },
 { 221,1701 }, { 222,1701 }, { 223,1701 }, { 224,1701 }, { 225,1701 },
 { 226,1701 }, { 227,1701 }, { 228,1701 }, { 229,1701 }, { 230,1701 },

 { 231,1701 }, { 232,1701 }, { 233,1701 }, { 234,1701 }, { 235,1701 },
 { 236,1701 }, { 237,1701 }, { 238,1701 }, { 239,1701 }, { 240,1701 },
 { 241,1701 }, { 242,1701 }, { 243,1701 }, { 244,1701 }, { 245,1701 },
 { 246,1701 }, { 247,1701 }, { 248,1701 }, { 249,1701 }, { 250,1701 },
 { 251,1701 }, { 252,1701 }, { 253,1701 }, { 254,1701 }, { 255,1701 },
 { 256,1701 }, {   0,   9 }, {   0,5969 }, {   1,1443 }, {   2,1443 },
 {   3,1443 }, {   4,1443 }, {   5,1443 }, {   6,1443 }, {   7,1443 },
 {   8,1443 }, {   9,1701 }, {  10,1324 }, {  11,1443 }, {  12,1443 },
 {  13,1443 }, {  14,1443 }, {  15,1443 }, {  16,1443 }, {  17,1443 },
 {  18,1443 }, {  19,1443 }, {  20,1443 }, {  21,1443 }, {  22,1443 },

 {  23,1443 }, {  24,1443 }, {  25,1443 }, {  26,1443 }, {  27,1443 },
 {  28,1443 }, {  29,1443 }, {  30,1443 }, {  31,1443 }, {  32,1701 },
 {  33,1443 }, {  34,1443 }, {  35,1443 }, {  36,1443 }, {  37,1443 },
 {  38,1443 }, {  39,1443 }, {  40,1443 }, {  41,1443 }, {  42,1443 },
 {  43,1443 }, {  44,1443 }, {  45,1443 }, {  46,1443 }, {  47,1443 },
 {  48,1443 }, {  49,1443 }, {  50,1443 }, {  51,1443 }, {  52,1443 },
 {  53,1443 }, {  54,1443 }, {  55,1443 }, {  56,1443 }, {  57,1443 },
 {  58,1443 }, {  59,1336 }, {  60,1443 }, {  61,1443 }, {  62,1443 },
 {  63,1443 }, {  64,1443 }, {  65,1443 }, {  66,1443 }, {  67,1443 },
 {  68,1443 }, {  69,1443 }, {  70,1443 }, {  71,1443 }, {  72,1443 },

 {  73,1443 }, {  74,1443 }, {  75,1443 }, {  76,1443 }, {  77,1443 },
 {  78,1443 }, {  79,1443 }, {  80,1443 }, {  81,1443 }, {  82,1443 },
 {  83,1443 }, {  84,1443 }, {  85,1443 }, {  86,1443 }, {  87,1443 },
 {  88,1443 }, {  89,1443 }, {  90,1443 }, {  91,1443 }, {  92,1443 },
 {  93,1443 }, {  94,1443 }, {  95,1443 }, {  96,1443 }, {  97,1443 },
 {  98,1443 }, {  99,1443 }, { 100,1443 }, { 101,1443 }, { 102,1443 },
 { 103,1443 }, { 104,1443 }, { 105,1443 }, { 106,1443 }, { 107,1443 },
 { 108,1443 }, { 109,1443 }, { 110,1443 }, { 111,1443 }, { 112,1443 },
 { 113,1443 }, { 114,1443 }, { 115,1443 }, { 116,1443 }, { 117,1443 },
 { 118,1443 }, { 119,1443 }, { 120,1443 }, { 121,1443 }, { 122,1443 },

 { 123,1443 }, { 124,1443 }, { 125,1443 }, { 126,1443 }, { 127,1443 },
 { 128,1443 }, { 129,1443 }, { 130,1443 }, { 131,1443 }, { 132,1443 },
 { 133,1443 }, { 134,1443 }, { 135,1443 }, { 136,1443 }, { 137,1443 },
 { 138,1443 }, { 139,1443 }, { 140,1443 }, { 141,1443 }, { 142,1443 },
 { 143,1443 }, { 144,1443 }, { 145,1443 }, { 146,1443 }, { 147,1443 },
 { 148,1443 }, { 149,1443 }, { 150,1443 }, { 151,1443 }, { 152,1443 },
 { 153,1443 }, { 154,1443 }, { 155,1443 }, { 156,1443 }, { 157,1443 },
 { 158,1443 }, { 159,1443 }, { 160,1443 }, { 161,1443 }, { 162,1443 },
 { 163,1443 }, { 164,1443 }, { 165,1443 }, { 166,1443 }, { 167,1443 },
 { 168,1443 }, { 169,1443 }, { 170,1443 }, { 171,1443 }, { 172,1443 },

 { 173,1443 }, { 174,1443 }, { 175,1443 }, { 176,1443 }, { 177,1443 },
 { 178,1443 }, { 179,1443 }, { 180,1443 }, { 181,1443 }, { 182,1443 },
 { 183,1443 }, { 184,1443 }, { 185,1443 }, { 186,1443 }, { 187,1443 },
 { 188,1443 }, { 189,1443 }, { 190,1443 }, { 191,1443 }, { 192,1443 },
 { 193,1443 }, { 194,1443 }, { 195,1443 }, { 196,1443 }, { 197,1443 },
 { 198,1443 }, { 199,1443 }, { 200,1443 }, { 201,1443 }, { 202,1443 },
 { 203,1443 }, { 204,1443 }, { 205,1443 }, { 206,1443 }, { 207,1443 },
 { 208,1443 }, { 209,1443 }, { 210,1443 }, { 211,1443 }, { 212,1443 },
 { 213,1443 }, { 214,1443 }, { 215,1443 }, { 216,1443 }, { 217,1443 },
 { 218,1443 }, { 219,1443 }, { 220,1443 }, { 221,1443 }, { 222,1443 },

 { 223,1443 }, { 224,1443 }, { 225,1443 }, { 226,1443 }, { 227,1443 },
 { 228,1443 }, { 229,1443 }, { 230,1443 }, { 231,1443 }, { 232,1443 },
 { 233,1443 }, { 234,1443 }, { 235,1443 }, { 236,1443 }, { 237,1443 },
 { 238,1443 }, { 239,1443 }, { 240,1443 }, { 241,1443 }, { 242,1443 },
 { 243,1443 }, { 244,1443 }, { 245,1443 }, { 246,1443 }, { 247,1443 },
 { 248,1443 }, { 249,1443 }, { 250,1443 }, { 251,1443 }, { 252,1443 },
 { 253,1443 }, { 254,1443 }, { 255,1443 }, { 256,1443 }, {   0,   4 },
 {   0,5711 }, {   1,1080 }, {   2,1080 }, {   3,1080 }, {   4,1080 },
 {   5,1080 }, {   6,1080 }, {   7,1080 }, {   8,1080 }, {   9,1701 },
 {  10,1703 }, {  11,1080 }, {  12,1080 }, {  13,1080 }, {  14,1080 },

 {  15,1080 }, {  16,1080 }, {  17,1080 }, {  18,1080 }, {  19,1080 },
 {  20,1080 }, {  21,1080 }, {  22,1080 }, {  23,1080 }, {  24,1080 },
 {  25,1080 }, {  26,1080 }, {  27,1080 }, {  28,1080 }, {  29,1080 },
 {  30,1080 }, {  31,1080 }, {  32,1701 }, {  33,1080 }, {  34,1080 },
 {  35,1080 }, {  36,1080 }, {  37,1080 }, {  38,1080 }, {  39,1080 },
 {  40,1080 }, {  41,1080 }, {  42,1080 }, {  43,1080 }, {  44,1701 },
 {  45,1080 }, {  46,1080 }, {  47,1080 }, {  48,1705 }, {  49,1705 },
 {  50,1705 }, {  51,1705 }, {  52,1705 }, {  53,1705 }, {  54,1705 },
 {  55,1705 }, {  56,1705 }, {  57,1705 }, {  58,1080 }, {  59,1707 },
 {  60,1080 }, {  61,1080 }, {  62,1080 }, {  63,1080 }, {  64,1080 },

 {  65,1705 }, {  66,1705 }, {  67,1705 }, {  68,1705 }, {  69,1705 },
 {  70,1705 }, {  71,1705 }, {  72,1705 }, {  73,1705 }, {  74,1705 },
 {  75,1705 }, {  76,1705 }, {  77,1705 }, {  78,1705 }, {  79,1705 },
 {  80,1705 }, {  81,1705 }, {  82,1705 }, {  83,1705 }, {  84,1705 },
 {  85,1705 }, {  86,1705 }, {  87,1705 }, {  88,1705 }, {  89,1705 },
 {  90,1705 }, {  91,1080 }, {  92,1080 }, {  93,1080 }, {  94,1080 },
 {  95,1705 }, {  96,1080 }, {  97,1705 }, {  98,1705 }, {  99,1705 },
 { 100,1705 }, { 101,1705 }, { 102,1705 }, { 103,1705 }, { 104,1705 },
 { 105,1705 }, { 106,1705 }, { 107,1705 }, { 108,1705 }, { 109,1705 },
 { 110,1705 }, { 111,1705 }, { 112,1705 }, { 113,1705 }, { 114,1705 },

 { 115,1705 }, { 116,1705 }, { 117,1705 }, { 118,1705 }, { 119,1705 },
 { 120,1705 }, { 121,1705 }, { 122,1705 }, { 123,1829 }, { 124,1080 },
 { 125,1080 }, { 126,1080 }, { 127,1080 }, { 128,1080 }, { 129,1080 },
 { 130,1080 }, { 131,1080 }, { 132,1080 }, { 133,1080 }, { 134,1080 },
 { 135,1080 }, { 136,1080 }, { 137,1080 }, { 138,1080 }, { 139,1080 },
 { 140,1080 }, { 141,1080 }, { 142,1080 }, { 143,1080 }, { 144,1080 },
 { 145,1080 }, { 146,1080 }, { 147,1080 }, { 148,1080 }, { 149,1080 },
 { 150,1080 }, { 151,1080 }, { 152,1080 }, { 153,1080 }, { 154,1080 },
 { 155,1080 }, { 156,1080 }, { 157,1080 }, { 158,1080 }, { 159,1080 },
 { 160,1080 }, { 161,1080 }, { 162,1080 }, { 163,1080 }, { 164,1080 },

 { 165,1080 }, { 166,1080 }, { 167,1080 }, { 168,1080 }, { 169,1080 },
 { 170,1080 }, { 171,1080 }, { 172,1080 }, { 173,1080 }, { 174,1080 },
 { 175,1080 }, { 176,1080 }, { 177,1080 }, { 178,1080 }, { 179,1080 },
 { 180,1080 }, { 181,1080 }, { 182,1080 }, { 183,1080 }, { 184,1080 },
 { 185,1080 }, { 186,1080 }, { 187,1080 }, { 188,1080 }, { 189,1080 },
 { 190,1080 }, { 191,1080 }, { 192,1080 }, { 193,1080 }, { 194,1080 },
 { 195,1080 }, { 196,1080 }, { 197,1080 }, { 198,1080 }, { 199,1080 },
 { 200,1080 }, { 201,1080 }, { 202,1080 }, { 203,1080 }, { 204,1080 },
 { 205,1080 }, { 206,1080 }, { 207,1080 }, { 208,1080 }, { 209,1080 },
 { 210,1080 }, { 211,1080 }, { 212,1080 }, { 213,1080 }, { 214,1080 },

 { 215,1080 }, { 216,1080 }, { 217,1080 }, { 218,1080 }, { 219,1080 },
 { 220,1080 }, { 221,1080 }, { 222,1080 }, { 223,1080 }, { 224,1080 },
 { 225,1080 }, { 226,1080 }, { 227,1080 }, { 228,1080 }, { 229,1080 },
 { 230,1080 }, { 231,1080 }, { 232,1080 }, { 233,1080 }, { 234,1080 },
 { 235,1080 }, { 236,1080 }, { 237,1080 }, { 238,1080 }, { 239,1080 },
 { 240,1080 }, { 241,1080 }, { 242,1080 }, { 243,1080 }, { 244,1080 },
 { 245,1080 }, { 246,1080 }, { 247,1080 }, { 248,1080 }, { 249,1080 },
 { 250,1080 }, { 251,1080 }, { 252,1080 }, { 253,1080 }, { 254,1080 },
 { 255,1080 }, { 256,1080 }, {   0,   4 }, {   0,5453 }, {   1, 822 },
 {   2, 822 }, {   3, 822 }, {   4, 822 }, {   5, 822 }, {   6, 822 },

 {   7, 822 }, {   8, 822 }, {   9,1443 }, {  10,1445 }, {  11, 822 },
 {  12, 822 }, {  13, 822 }, {  14, 822 }, {  15, 822 }, {  16, 822 },
 {  17, 822 }, {  18, 822 }, {  19, 822 }, {  20, 822 }, {  21, 822 },
 {  22, 822 }, {  23, 822 }, {  24, 822 }, {  25, 822 }, {  26, 822 },
 {  27, 822 }, {  28, 822 }, {  29, 822 }, {  30, 822 }, {  31, 822 },
 {  32,1443 }, {  33, 822 }, {  34, 822 }, {  35, 822 }, {  36, 822 },
 {  37, 822 }, {  38, 822 }, {  39, 822 }, {  40, 822 }, {  41, 822 },
 {  42, 822 }, {  43, 822 }, {  44,1443 }, {  45, 822 }, {  46, 822 },
 {  47, 822 }, {  48,1447 }, {  49,1447 }, {  50,1447 }, {  51,1447 },
 {  52,1447 }, {  53,1447 }, {  54,1447 }, {  55,1447 }, {  56,1447 },

 {  57,1447 }, {  58, 822 }, {  59,1449 }, {  60, 822 }, {  61, 822 },
 {  62, 822 }, {  63, 822 }, {  64, 822 }, {  65,1447 }, {  66,1447 },
 {  67,1447 }, {  68,1447 }, {  69,1447 }, {  70,1447 }, {  71,1447 },
 {  72,1447 }, {  73,1447 }, {  74,1447 }, {  75,1447 }, {  76,1447 },
 {  77,1447 }, {  78,1447 }, {  79,1447 }, {  80,1447 }, {  81,1447 },
 {  82,1447 }, {  83,1447 }, {  84,1447 }, {  85,1447 }, {  86,1447 },
 {  87,1447 }, {  88,1447 }, {  89,1447 }, {  90,1447 }, {  91, 822 },
 {  92, 822 }, {  93, 822 }, {  94, 822 }, {  95,1447 }, {  96, 822 },
 {  97,1447 }, {  98,1447 }, {  99,1447 }, { 100,1447 }, { 101,1447 },
 { 102,1447 }, { 103,1447 }, { 104,1447 }, { 105,1447 }, { 106,1447 },

 { 107,1447 }, { 108,1447 }, { 109,1447 }, { 110,1447 }, { 111,1447 },
 { 112,1447 }, { 113,1447 }, { 114,1447 }, { 115,1447 }, { 116,1447 },
 { 117,1447 }, { 118,1447 }, { 119,1447 }, { 120,1447 }, { 121,1447 },
 { 122,1447 }, { 123,1571 }, { 124, 822 }, { 125, 822 }, { 126, 822 },
 { 127, 822 }, { 128, 822 }, { 129, 822 }, { 130, 822 }, { 131, 822 },
 { 132, 822 }, { 133, 822 }, { 134, 822 }, { 135, 822 }, { 136, 822 },
 { 137, 822 }, { 138, 822 }, { 139, 822 }, { 140, 822 }, { 141, 822 },
 { 142, 822 }, { 143, 822 }, { 144, 822 }, { 145, 822 }, { 146, 822 },
 { 147, 822 }, { 148, 822 }, { 149, 822 }, { 150, 822 }, { 151, 822 },
 { 152, 822 }, { 153, 822 }, { 154, 822 }, { 155, 822 }, { 156, 822 },

 { 157, 822 }, { 158, 822 }, { 159, 822 }, { 160, 822 }, { 161, 822 },
 { 162, 822 }, { 163, 822 }, { 164, 822 }, { 165, 822 }, { 166, 822 },
 { 167, 822 }, { 168, 822 }, { 169, 822 }, { 170, 822 }, { 171, 822 },
 { 172, 822 }, { 173, 822 }, { 174, 822 }, { 175, 822 }, { 176, 822 },
 { 177, 822 }, { 178, 822 }, { 179, 822 }, { 180, 822 }, { 181, 822 },
 { 182, 822 }, { 183, 822 }, { 184, 822 }, { 185, 822 }, { 186, 822 },
 { 187, 822 }, { 188, 822 }, { 189, 822 }, { 190, 822 }, { 191, 822 },
 { 192, 822 }, { 193, 822 }, { 194, 822 }, { 195, 822 }, { 196, 822 },
 { 197, 822 }, { 198, 822 }, { 199, 822 }, { 200, 822 }, { 201, 822 },
 { 202, 822 }, { 203, 822 }, { 204, 822 }, { 205, 822 }, { 206, 822 },

 { 207, 822 }, { 208, 822 }, { 209, 822 }, { 210, 822 }, { 211, 822 },
 { 212, 822 }, { 213, 822 }, { 214, 822 }, { 215, 822 }, { 216, 822 },
 { 217, 822 }, { 218, 822 }, { 219, 822 }, { 220, 822 }, { 221, 822 },
 { 222, 822 }, { 223, 822 }, { 224, 822 }, { 225, 822 }, { 226, 822 },
 { 227, 822 }, { 228, 822 }, { 229, 822 }, { 230, 822 }, { 231, 822 },
 { 232, 822 }, { 233, 822 }, { 234, 822 }, { 235, 822 }, { 236, 822 },
 { 237, 822 }, { 238, 822 }, { 239, 822 }, { 240, 822 }, { 241, 822 },
 { 242, 822 }, { 243, 822 }, { 244, 822 }, { 245, 822 }, { 246, 822 },
 { 247, 822 }, { 248, 822 }, { 249, 822 }, { 250, 822 }, { 251, 822 },
 { 252, 822 }, { 253, 822 }, { 254, 822 }, { 255, 822 }, { 256, 822 },

 {   0,  60 }, {   0,5195 }, {   0,  58 }, {   0,5193 }, {   0,  59 },
 {   0,5191 }, {   0,  60 }, {   0,5189 }, {   0,  60 }, {   0,5187 },
 {   0,   0 }, {   0,   0 }, {   9,1191 }, {   0,   0 }, {   0,   0 },
 {  12,1191 }, {   0,   0 }, {   0,  56 }, {   0,5178 }, {   0,  28 },
 {   0,5176 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  32,1191 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  36,1565 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  36,1637 },
 {  48,1588 }, {  49,1588 }, {  50,1588 }, {  51,1588 }, {  52,1588 },
 {  53,1588 }, {  54,1588 }, {  55,1588 }, {  56,1588 }, {  57,1588 },
 {   0,   0 }, {  48,1637 }, {  49,1637 }, {  50,1637 }, {  51,1637 },
 {  52,1637 }, {  53,1637 }, {  54,1637 }, {  55,1637 }, {  56,1637 },
 {  57,1637 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  73,1568 }, {  61,1560 }, {  73,1569 }, {  65,1637 }, {  66,1637 },
 {  67,1637 }, {  68,1637 }, {  69,1637 }, {  70,1637 }, {  71,1637 },
 {  72,1637 }, {  73,1637 }, {  74,1637 }, {  75,1637 }, {  76,1637 },
 {  77,1637 }, {  78,1637 }, {  79,1637 }, {  80,1637 }, {  81,1637 },

 {  82,1637 }, {  83,1637 }, {  84,1637 }, {  85,1637 }, {  86,1637 },
 {  87,1637 }, {  88,1637 }, {  89,1637 }, {  90,1637 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, { 105,1568 }, {  95,1637 }, { 105,1569 },
 {  97,1637 }, {  98,1637 }, {  99,1637 }, { 100,1637 }, { 101,1637 },
 { 102,1637 }, { 103,1637 }, { 104,1637 }, { 105,1637 }, { 106,1637 },
 { 107,1637 }, { 108,1637 }, { 109,1637 }, { 110,1637 }, { 111,1637 },
 { 112,1637 }, { 113,1637 }, { 114,1637 }, { 115,1637 }, { 116,1637 },
 { 117,1637 }, { 118,1637 }, { 119,1637 }, { 120,1637 }, { 121,1637 },
 { 122,1637 }, {   0,  60 }, {   0,5054 }, {   1,1637 }, {   2,1637 },
 {   3,1637 }, {   4,1637 }, {   5,1637 }, {   6,1637 }, {   7,1637 },

 {   8,1637 }, {   9,1637 }, {  10,1637 }, {  11,1637 }, {  12,1637 },
 {  13,1637 }, {  14,1637 }, {  15,1637 }, {  16,1637 }, {  17,1637 },
 {  18,1637 }, {  19,1637 }, {  20,1637 }, {  21,1637 }, {  22,1637 },
 {  23,1637 }, {  24,1637 }, {  25,1637 }, {  26,1637 }, {  27,1637 },
 {  28,1637 }, {  29,1637 }, {  30,1637 }, {  31,1637 }, {  32,1637 },
 {  33,1637 }, {  34,1637 }, {  35,1637 }, {  36,1637 }, {  37,1637 },
 {  38,1637 }, {  39,1455 }, {  40,1637 }, {  41,1637 }, {  42,1637 },
 {  43,1637 }, {  44,1637 }, {  45,1637 }, {  46,1637 }, {  47,1637 },
 {  48,1637 }, {  49,1637 }, {  50,1637 }, {  51,1637 }, {  52,1637 },
 {  53,1637 }, {  54,1637 }, {  55,1637 }, {  56,1637 }, {  57,1637 },

 {  58,1637 }, {  59,1637 }, {  60,1637 }, {  61,1637 }, {  62,1637 },
 {  63,1637 }, {  64,1637 }, {  65,1637 }, {  66,1637 }, {  67,1637 },
 {  68,1637 }, {  69,1637 }, {  70,1637 }, {  71,1637 }, {  72,1637 },
 {  73,1637 }, {  74,1637 }, {  75,1637 }, {  76,1637 }, {  77,1637 },
 {  78,1637 }, {  79,1637 }, {  80,1637 }, {  81,1637 }, {  82,1637 },
 {  83,1637 }, {  84,1637 }, {  85,1637 }, {  86,1637 }, {  87,1637 },
 {  88,1637 }, {  89,1637 }, {  90,1637 }, {  91,1637 }, {  92,1637 },
 {  93,1637 }, {  94,1637 }, {  95,1637 }, {  96,1637 }, {  97,1637 },
 {  98,1637 }, {  99,1637 }, { 100,1637 }, { 101,1637 }, { 102,1637 },
 { 103,1637 }, { 104,1637 }, { 105,1637 }, { 106,1637 }, { 107,1637 },

 { 108,1637 }, { 109,1637 }, { 110,1637 }, { 111,1637 }, { 112,1637 },
 { 113,1637 }, { 114,1637 }, { 115,1637 }, { 116,1637 }, { 117,1637 },
 { 118,1637 }, { 119,1637 }, { 120,1637 }, { 121,1637 }, { 122,1637 },
 { 123,1637 }, { 124,1637 }, { 125,1637 }, { 126,1637 }, { 127,1637 },
 { 128,1637 }, { 129,1637 }, { 130,1637 }, { 131,1637 }, { 132,1637 },
 { 133,1637 }, { 134,1637 }, { 135,1637 }, { 136,1637 }, { 137,1637 },
 { 138,1637 }, { 139,1637 }, { 140,1637 }, { 141,1637 }, { 142,1637 },
 { 143,1637 }, { 144,1637 }, { 145,1637 }, { 146,1637 }, { 147,1637 },
 { 148,1637 }, { 149,1637 }, { 150,1637 }, { 151,1637 }, { 152,1637 },
 { 153,1637 }, { 154,1637 }, { 155,1637 }, { 156,1637 }, { 157,1637 },

 { 158,1637 }, { 159,1637 }, { 160,1637 }, { 161,1637 }, { 162,1637 },
 { 163,1637 }, { 164,1637 }, { 165,1637 }, { 166,1637 }, { 167,1637 },
 { 168,1637 }, { 169,1637 }, { 170,1637 }, { 171,1637 }, { 172,1637 },
 { 173,1637 }, { 174,1637 }, { 175,1637 }, { 176,1637 }, { 177,1637 },
 { 178,1637 }, { 179,1637 }, { 180,1637 }, { 181,1637 }, { 182,1637 },
 { 183,1637 }, { 184,1637 }, { 185,1637 }, { 186,1637 }, { 187,1637 },
 { 188,1637 }, { 189,1637 }, { 190,1637 }, { 191,1637 }, { 192,1637 },
 { 193,1637 }, { 194,1637 }, { 195,1637 }, { 196,1637 }, { 197,1637 },
 { 198,1637 }, { 199,1637 }, { 200,1637 }, { 201,1637 }, { 202,1637 },
 { 203,1637 }, { 204,1637 }, { 205,1637 }, { 206,1637 }, { 207,1637 },

 { 208,1637 }, { 209,1637 }, { 210,1637 }, { 211,1637 }, { 212,1637 },
 { 213,1637 }, { 214,1637 }, { 215,1637 }, { 216,1637 }, { 217,1637 },
 { 218,1637 }, { 219,1637 }, { 220,1637 }, { 221,1637 }, { 222,1637 },
 { 223,1637 }, { 224,1637 }, { 225,1637 }, { 226,1637 }, { 227,1637 },
 { 228,1637 }, { 229,1637 }, { 230,1637 }, { 231,1637 }, { 232,1637 },
 { 233,1637 }, { 234,1637 }, { 235,1637 }, { 236,1637 }, { 237,1637 },
 { 238,1637 }, { 239,1637 }, { 240,1637 }, { 241,1637 }, { 242,1637 },
 { 243,1637 }, { 244,1637 }, { 245,1637 }, { 246,1637 }, { 247,1637 },
 { 248,1637 }, { 249,1637 }, { 250,1637 }, { 251,1637 }, { 252,1637 },
 { 253,1637 }, { 254,1637 }, { 255,1637 }, { 256,1637 }, {   0,  17 },

 {   0,4796 }, {   0,  18 }, {   0,4794 }, {   0,  23 }, {   0,4792 },
 {   0,  24 }, {   0,4790 }, {   0,  39 }, {   0,4788 }, {   0,  25 },
 {   0,4786 }, {   0,  40 }, {   0,4784 }, {   0,  42 }, {   0,4782 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,  55 }, {   0,4768 }, {   0,  46 },
 {   0,4766 }, {   0,  47 }, {   0,4764 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,  50 }, {   0,4755 }, {  42,1199 }, {   0,  52 }, {   0,4752 },
 {   0,   0 }, {  46,1201 }, {   0,  51 }, {   0,4748 }, {   0,  43 },

 {   0,4746 }, {   0,  21 }, {   0,4744 }, {  41,1197 }, {   0,  22 },
 {   0,4741 }, {   0,  44 }, {   0,4739 }, {  46,1199 }, {   0,   0 },
 {   0,   0 }, {  47,1199 }, {   0,   0 }, {  35,1609 }, {   0,   0 },
 {  61,1199 }, {   0,   0 }, {  61,1199 }, {   0,  16 }, {   0,4727 },
 {   0,   0 }, {  61,1197 }, {   0,  29 }, {   0,4723 }, {  46,1632 },
 {  61,1201 }, {  48,1668 }, {  49,1668 }, {  50,1668 }, {  51,1668 },
 {  52,1668 }, {  53,1668 }, {  54,1668 }, {  55,1668 }, {  56,1668 },
 {  57,1668 }, {   0,  55 }, {   0,4709 }, {   0,  38 }, {   0,4707 },
 {   0,   0 }, {  61,1189 }, {   0,   0 }, {  65,1727 }, {  66,1786 },
 {  67,1727 }, {  68,1727 }, {  69,1846 }, {  70,1727 }, {   0,   0 },

 {  72,1189 }, {  60,1217 }, {  61,1219 }, {  62,1221 }, {   0,   0 },
 {  36,1582 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  61,1216 },
 {  62,1239 }, {  42,1584 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  88,1871 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  35,1550 }, {   0,   0 }, {   0,   0 },
 {  97,1727 }, {  98,1786 }, {  99,1727 }, { 100,1727 }, { 101,1846 },
 { 102,1727 }, {   0,   0 }, { 104,1189 }, {  46,1573 }, {  61,1582 },
 {  48,1609 }, {  49,1609 }, {  50,1609 }, {  51,1609 }, {  52,1609 },
 {  53,1609 }, {  54,1609 }, {  55,1609 }, {  56,1609 }, {  57,1609 },
 {   0,  56 }, {   0,4650 }, {   0,   0 }, { 120,1871 }, {   0,   0 },

 {   0,   9 }, {   0,4645 }, {  65,1668 }, {  66,1727 }, {  67,1668 },
 {  68,1668 }, {  69,1787 }, {  70,1668 }, {   0,   0 }, {  72,1130 },
 {   9,1514 }, {  10,1514 }, {   0,  11 }, {   0,4633 }, {   0,   8 },
 {   0,4631 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  36,1109 }, {  32,1514 }, {  97,1668 },
 {  98,1727 }, {  99,1668 }, { 100,1668 }, { 101,1787 }, { 102,1668 },
 {   0,   0 }, { 104,1130 }, {   0,   0 }, {   0,   0 }, {  48,1109 },
 {  49,1109 }, {  50,1109 }, {  51,1109 }, {  52,1109 }, {  53,1109 },

 {  54,1109 }, {  55,1109 }, {  56,1109 }, {  57,1109 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,1109 }, {  66,1109 }, {  67,1109 }, {  68,1109 },
 {  69,1109 }, {  70,1109 }, {  71,1109 }, {  72,1109 }, {  73,1109 },
 {  74,1109 }, {  75,1109 }, {  76,1109 }, {  77,1109 }, {  78,1109 },
 {  79,1109 }, {  80,1109 }, {  81,1109 }, {  82,1109 }, {  83,1812 },
 {  84,1109 }, {  85,1109 }, {  86,1109 }, {  87,1109 }, {  88,1109 },
 {  89,1109 }, {  90,1109 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  95,1109 }, {   0,   0 }, {  97,1109 }, {  98,1109 },
 {  99,1109 }, { 100,1109 }, { 101,1109 }, { 102,1109 }, { 103,1109 },

 { 104,1109 }, { 105,1109 }, { 106,1109 }, { 107,1109 }, { 108,1109 },
 { 109,1109 }, { 110,1109 }, { 111,1109 }, { 112,1109 }, { 113,1109 },
 { 114,1109 }, { 115,1812 }, { 116,1109 }, { 117,1109 }, { 118,1109 },
 { 119,1109 }, { 120,1109 }, { 121,1109 }, { 122,1109 }, {   0,  10 },
 {   0,4526 }, {   1,1812 }, {   2,1812 }, {   3,1812 }, {   4,1812 },
 {   5,1812 }, {   6,1812 }, {   7,1812 }, {   8,1812 }, {   9,1812 },
 {   0,   0 }, {  11,1812 }, {  12,1812 }, {  13,1812 }, {  14,1812 },
 {  15,1812 }, {  16,1812 }, {  17,1812 }, {  18,1812 }, {  19,1812 },
 {  20,1812 }, {  21,1812 }, {  22,1812 }, {  23,1812 }, {  24,1812 },
 {  25,1812 }, {  26,1812 }, {  27,1812 }, {  28,1812 }, {  29,1812 },

 {  30,1812 }, {  31,1812 }, {  32,1812 }, {  33,1812 }, {  34,1812 },
 {  35,1812 }, {  36,1812 }, {  37,1812 }, {  38,1812 }, {  39,1812 },
 {  40,1812 }, {  41,1812 }, {  42,1812 }, {  43,1812 }, {  44,1812 },
 {  45,1812 }, {  46,1812 }, {  47,1812 }, {  48,1812 }, {  49,1812 },
 {  50,1812 }, {  51,1812 }, {  52,1812 }, {  53,1812 }, {  54,1812 },
 {  55,1812 }, {  56,1812 }, {  57,1812 }, {  58,1812 }, {  59,1392 },
 {  60,1812 }, {  61,1812 }, {  62,1812 }, {  63,1812 }, {  64,1812 },
 {  65,1812 }, {  66,1812 }, {  67,1812 }, {  68,1812 }, {  69,1812 },
 {  70,1812 }, {  71,1812 }, {  72,1812 }, {  73,1812 }, {  74,1812 },
 {  75,1812 }, {  76,1812 }, {  77,1812 }, {  78,1812 }, {  79,1812 },

 {  80,1812 }, {  81,1812 }, {  82,1812 }, {  83,1812 }, {  84,1812 },
 {  85,1812 }, {  86,1812 }, {  87,1812 }, {  88,1812 }, {  89,1812 },
 {  90,1812 }, {  91,1812 }, {  92,1812 }, {  93,1812 }, {  94,1812 },
 {  95,1812 }, {  96,1812 }, {  97,1812 }, {  98,1812 }, {  99,1812 },
 { 100,1812 }, { 101,1812 }, { 102,1812 }, { 103,1812 }, { 104,1812 },
 { 105,1812 }, { 106,1812 }, { 107,1812 }, { 108,1812 }, { 109,1812 },
 { 110,1812 }, { 111,1812 }, { 112,1812 }, { 113,1812 }, { 114,1812 },
 { 115,1812 }, { 116,1812 }, { 117,1812 }, { 118,1812 }, { 119,1812 },
 { 120,1812 }, { 121,1812 }, { 122,1812 }, { 123,1812 }, { 124,1812 },
 { 125,1812 }, { 126,1812 }, { 127,1812 }, { 128,1812 }, { 129,1812 },

 { 130,1812 }, { 131,1812 }, { 132,1812 }, { 133,1812 }, { 134,1812 },
 { 135,1812 }, { 136,1812 }, { 137,1812 }, { 138,1812 }, { 139,1812 },
 { 140,1812 }, { 141,1812 }, { 142,1812 }, { 143,1812 }, { 144,1812 },
 { 145,1812 }, { 146,1812 }, { 147,1812 }, { 148,1812 }, { 149,1812 },
 { 150,1812 }, { 151,1812 }, { 152,1812 }, { 153,1812 }, { 154,1812 },
 { 155,1812 }, { 156,1812 }, { 157,1812 }, { 158,1812 }, { 159,1812 },
 { 160,1812 }, { 161,1812 }, { 162,1812 }, { 163,1812 }, { 164,1812 },
 { 165,1812 }, { 166,1812 }, { 167,1812 }, { 168,1812 }, { 169,1812 },
 { 170,1812 }, { 171,1812 }, { 172,1812 }, { 173,1812 }, { 174,1812 },
 { 175,1812 }, { 176,1812 }, { 177,1812 }, { 178,1812 }, { 179,1812 },

 { 180,1812 }, { 181,1812 }, { 182,1812 }, { 183,1812 }, { 184,1812 },
 { 185,1812 }, { 186,1812 }, { 187,1812 }, { 188,1812 }, { 189,1812 },
 { 190,1812 }, { 191,1812 }, { 192,1812 }, { 193,1812 }, { 194,1812 },
 { 195,1812 }, { 196,1812 }, { 197,1812 }, { 198,1812 }, { 199,1812 },
 { 200,1812 }, { 201,1812 }, { 202,1812 }, { 203,1812 }, { 204,1812 },
 { 205,1812 }, { 206,1812 }, { 207,1812 }, { 208,1812 }, { 209,1812 },
 { 210,1812 }, { 211,1812 }, { 212,1812 }, { 213,1812 }, { 214,1812 },
 { 215,1812 }, { 216,1812 }, { 217,1812 }, { 218,1812 }, { 219,1812 },
 { 220,1812 }, { 221,1812 }, { 222,1812 }, { 223,1812 }, { 224,1812 },
 { 225,1812 }, { 226,1812 }, { 227,1812 }, { 228,1812 }, { 229,1812 },

 { 230,1812 }, { 231,1812 }, { 232,1812 }, { 233,1812 }, { 234,1812 },
 { 235,1812 }, { 236,1812 }, { 237,1812 }, { 238,1812 }, { 239,1812 },
 { 240,1812 }, { 241,1812 }, { 242,1812 }, { 243,1812 }, { 244,1812 },
 { 245,1812 }, { 246,1812 }, { 247,1812 }, { 248,1812 }, { 249,1812 },
 { 250,1812 }, { 251,1812 }, { 252,1812 }, { 253,1812 }, { 254,1812 },
 { 255,1812 }, { 256,1812 }, {   0,   9 }, {   0,4268 }, {   1,1554 },
 {   2,1554 }, {   3,1554 }, {   4,1554 }, {   5,1554 }, {   6,1554 },
 {   7,1554 }, {   8,1554 }, {   9,1812 }, {  10,1137 }, {  11,1554 },
 {  12,1554 }, {  13,1554 }, {  14,1554 }, {  15,1554 }, {  16,1554 },
 {  17,1554 }, {  18,1554 }, {  19,1554 }, {  20,1554 }, {  21,1554 },

 {  22,1554 }, {  23,1554 }, {  24,1554 }, {  25,1554 }, {  26,1554 },
 {  27,1554 }, {  28,1554 }, {  29,1554 }, {  30,1554 }, {  31,1554 },
 {  32,1812 }, {  33,1554 }, {  34,1554 }, {  35,1554 }, {  36,1554 },
 {  37,1554 }, {  38,1554 }, {  39,1554 }, {  40,1554 }, {  41,1554 },
 {  42,1554 }, {  43,1554 }, {  44,1554 }, {  45,1554 }, {  46,1554 },
 {  47,1554 }, {  48,1554 }, {  49,1554 }, {  50,1554 }, {  51,1554 },
 {  52,1554 }, {  53,1554 }, {  54,1554 }, {  55,1554 }, {  56,1554 },
 {  57,1554 }, {  58,1554 }, {  59,1134 }, {  60,1554 }, {  61,1554 },
 {  62,1554 }, {  63,1554 }, {  64,1554 }, {  65,1554 }, {  66,1554 },
 {  67,1554 }, {  68,1554 }, {  69,1554 }, {  70,1554 }, {  71,1554 },

 {  72,1554 }, {  73,1554 }, {  74,1554 }, {  75,1554 }, {  76,1554 },
 {  77,1554 }, {  78,1554 }, {  79,1554 }, {  80,1554 }, {  81,1554 },
 {  82,1554 }, {  83,1554 }, {  84,1554 }, {  85,1554 }, {  86,1554 },
 {  87,1554 }, {  88,1554 }, {  89,1554 }, {  90,1554 }, {  91,1554 },
 {  92,1554 }, {  93,1554 }, {  94,1554 }, {  95,1554 }, {  96,1554 },
 {  97,1554 }, {  98,1554 }, {  99,1554 }, { 100,1554 }, { 101,1554 },
 { 102,1554 }, { 103,1554 }, { 104,1554 }, { 105,1554 }, { 106,1554 },
 { 107,1554 }, { 108,1554 }, { 109,1554 }, { 110,1554 }, { 111,1554 },
 { 112,1554 }, { 113,1554 }, { 114,1554 }, { 115,1554 }, { 116,1554 },
 { 117,1554 }, { 118,1554 }, { 119,1554 }, { 120,1554 }, { 121,1554 },

 { 122,1554 }, { 123,1554 }, { 124,1554 }, { 125,1554 }, { 126,1554 },
 { 127,1554 }, { 128,1554 }, { 129,1554 }, { 130,1554 }, { 131,1554 },
 { 132,1554 }, { 133,1554 }, { 134,1554 }, { 135,1554 }, { 136,1554 },
 { 137,1554 }, { 138,1554 }, { 139,1554 }, { 140,1554 }, { 141,1554 },
 { 142,1554 }, { 143,1554 }, { 144,1554 }, { 145,1554 }, { 146,1554 },
 { 147,1554 }, { 148,1554 }, { 149,1554 }, { 150,1554 }, { 151,1554 },
 { 152,1554 }, { 153,1554 }, { 154,1554 }, { 155,1554 }, { 156,1554 },
 { 157,1554 }, { 158,1554 }, { 159,1554 }, { 160,1554 }, { 161,1554 },
 { 162,1554 }, { 163,1554 }, { 164,1554 }, { 165,1554 }, { 166,1554 },
 { 167,1554 }, { 168,1554 }, { 169,1554 }, { 170,1554 }, { 171,1554 },

 { 172,1554 }, { 173,1554 }, { 174,1554 }, { 175,1554 }, { 176,1554 },
 { 177,1554 }, { 178,1554 }, { 179,1554 }, { 180,1554 }, { 181,1554 },
 { 182,1554 }, { 183,1554 }, { 184,1554 }, { 185,1554 }, { 186,1554 },
 { 187,1554 }, { 188,1554 }, { 189,1554 }, { 190,1554 }, { 191,1554 },
 { 192,1554 }, { 193,1554 }, { 194,1554 }, { 195,1554 }, { 196,1554 },
 { 197,1554 }, { 198,1554 }, { 199,1554 }, { 200,1554 }, { 201,1554 },
 { 202,1554 }, { 203,1554 }, { 204,1554 }, { 205,1554 }, { 206,1554 },
 { 207,1554 }, { 208,1554 }, { 209,1554 }, { 210,1554 }, { 211,1554 },
 { 212,1554 }, { 213,1554 }, { 214,1554 }, { 215,1554 }, { 216,1554 },
 { 217,1554 }, { 218,1554 }, { 219,1554 }, { 220,1554 }, { 221,1554 },

 { 222,1554 }, { 223,1554 }, { 224,1554 }, { 225,1554 }, { 226,1554 },
 { 227,1554 }, { 228,1554 }, { 229,1554 }, { 230,1554 }, { 231,1554 },
 { 232,1554 }, { 233,1554 }, { 234,1554 }, { 235,1554 }, { 236,1554 },
 { 237,1554 }, { 238,1554 }, { 239,1554 }, { 240,1554 }, { 241,1554 },
 { 242,1554 }, { 243,1554 }, { 244,1554 }, { 245,1554 }, { 246,1554 },
 { 247,1554 }, { 248,1554 }, { 249,1554 }, { 250,1554 }, { 251,1554 },
 { 252,1554 }, { 253,1554 }, { 254,1554 }, { 255,1554 }, { 256,1554 },
 {   0,   4 }, {   0,4010 }, {   0,   4 }, {   0,4008 }, {   0,   6 },
 {   0,4006 }, {   0,   7 }, {   0,4004 }, {   0,  58 }, {   0,4002 },
 {   9,1812 }, {  10,1812 }, {   9,1810 }, {  10,1810 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   9,   0 }, {   0,   0 },
 {   0,   0 }, {  12,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  32,1812 }, {   0,   0 },
 {  32,1810 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  32,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  44,1812 }, {   0,   0 }, {  44,1810 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,1810 }, {  49,1810 },
 {  50,1810 }, {  51,1810 }, {  52,1810 }, {  53,1810 }, {  54,1810 },
 {  55,1810 }, {  56,1810 }, {  57,1810 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65,1810 }, {  66,1810 }, {  67,1810 }, {  68,1810 }, {  69,1810 },
 {  70,1810 }, {  71,1810 }, {  72,1810 }, {  73,1810 }, {  74,1810 },
 {  75,1810 }, {  76,1810 }, {  77,1810 }, {  78,1810 }, {  79,1810 },
 {  80,1810 }, {  81,1810 }, {  82,1810 }, {  83,1810 }, {  84,1810 },
 {  85,1810 }, {  86,1810 }, {  87,1810 }, {  88,1810 }, {  89,1810 },
 {  90,1810 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  95,1810 }, {   0,   0 }, {  97,1810 }, {  98,1810 }, {  99,1810 },
 { 100,1810 }, { 101,1810 }, { 102,1810 }, { 103,1810 }, { 104,1810 },
 { 105,1810 }, { 106,1810 }, { 107,1810 }, { 108,1810 }, { 109,1810 },

 { 110,1810 }, { 111,1810 }, { 112,1810 }, { 113,1810 }, { 114,1810 },
 { 115,1810 }, { 116,1810 }, { 117,1810 }, { 118,1810 }, { 119,1810 },
 { 120,1810 }, { 121,1810 }, { 122,1810 }, {   0,   8 }, {   0,3882 },
 {   1,1810 }, {   2,1810 }, {   3,1810 }, {   4,1810 }, {   5,1810 },
 {   6,1810 }, {   7,1810 }, {   8,1810 }, {   9,1810 }, {  10,1810 },
 {  11,1810 }, {  12,1810 }, {  13,1810 }, {  14,1810 }, {  15,1810 },
 {  16,1810 }, {  17,1810 }, {  18,1810 }, {  19,1810 }, {  20,1810 },
 {  21,1810 }, {  22,1810 }, {  23,1810 }, {  24,1810 }, {  25,1810 },
 {  26,1810 }, {  27,1810 }, {  28,1810 }, {  29,1810 }, {  30,1810 },
 {  31,1810 }, {  32,1810 }, {  33,1810 }, {  34,1810 }, {  35,1810 },

 {  36,1810 }, {  37,1810 }, {  38,1810 }, {  39,1810 }, {  40,1810 },
 {  41,1810 }, {  42,1810 }, {  43,1810 }, {  44,1810 }, {  45,1810 },
 {  46,1810 }, {  47,1810 }, {  48,1810 }, {  49,1810 }, {  50,1810 },
 {  51,1810 }, {  52,1810 }, {  53,1810 }, {  54,1810 }, {  55,1810 },
 {  56,1810 }, {  57,1810 }, {  58,1810 }, {  59,1810 }, {  60,1810 },
 {  61,1810 }, {  62,1810 }, {  63,1810 }, {  64,1810 }, {  65,1810 },
 {  66,1810 }, {  67,1810 }, {  68,1810 }, {  69,1810 }, {  70,1810 },
 {  71,1810 }, {  72,1810 }, {  73,1810 }, {  74,1810 }, {  75,1810 },
 {  76,1810 }, {  77,1810 }, {  78,1810 }, {  79,1810 }, {  80,1810 },
 {  81,1810 }, {  82,1810 }, {  83,1810 }, {  84,1810 }, {  85,1810 },

 {  86,1810 }, {  87,1810 }, {  88,1810 }, {  89,1810 }, {  90,1810 },
 {  91,1810 }, {  92,1810 }, {  93,1810 }, {  94,1810 }, {  95,1810 },
 {  96,1810 }, {  97,1810 }, {  98,1810 }, {  99,1810 }, { 100,1810 },
 { 101,1810 }, { 102,1810 }, { 103,1810 }, { 104,1810 }, { 105,1810 },
 { 106,1810 }, { 107,1810 }, { 108,1810 }, { 109,1810 }, { 110,1810 },
 { 111,1810 }, { 112,1810 }, { 113,1810 }, { 114,1810 }, { 115,1810 },
 { 116,1810 }, { 117,1810 }, { 118,1810 }, { 119,1810 }, { 120,1810 },
 { 121,1810 }, { 122,1810 }, { 123,1810 }, { 124,1810 }, { 125,1688 },
 { 126,1810 }, { 127,1810 }, { 128,1810 }, { 129,1810 }, { 130,1810 },
 { 131,1810 }, { 132,1810 }, { 133,1810 }, { 134,1810 }, { 135,1810 },

 { 136,1810 }, { 137,1810 }, { 138,1810 }, { 139,1810 }, { 140,1810 },
 { 141,1810 }, { 142,1810 }, { 143,1810 }, { 144,1810 }, { 145,1810 },
 { 146,1810 }, { 147,1810 }, { 148,1810 }, { 149,1810 }, { 150,1810 },
 { 151,1810 }, { 152,1810 }, { 153,1810 }, { 154,1810 }, { 155,1810 },
 { 156,1810 }, { 157,1810 }, { 158,1810 }, { 159,1810 }, { 160,1810 },
 { 161,1810 }, { 162,1810 }, { 163,1810 }, { 164,1810 }, { 165,1810 },
 { 166,1810 }, { 167,1810 }, { 168,1810 }, { 169,1810 }, { 170,1810 },
 { 171,1810 }, { 172,1810 }, { 173,1810 }, { 174,1810 }, { 175,1810 },
 { 176,1810 }, { 177,1810 }, { 178,1810 }, { 179,1810 }, { 180,1810 },
 { 181,1810 }, { 182,1810 }, { 183,1810 }, { 184,1810 }, { 185,1810 },

 { 186,1810 }, { 187,1810 }, { 188,1810 }, { 189,1810 }, { 190,1810 },
 { 191,1810 }, { 192,1810 }, { 193,1810 }, { 194,1810 }, { 195,1810 },
 { 196,1810 }, { 197,1810 }, { 198,1810 }, { 199,1810 }, { 200,1810 },
 { 201,1810 }, { 202,1810 }, { 203,1810 }, { 204,1810 }, { 205,1810 },
 { 206,1810 }, { 207,1810 }, { 208,1810 }, { 209,1810 }, { 210,1810 },
 { 211,1810 }, { 212,1810 }, { 213,1810 }, { 214,1810 }, { 215,1810 },
 { 216,1810 }, { 217,1810 }, { 218,1810 }, { 219,1810 }, { 220,1810 },
 { 221,1810 }, { 222,1810 }, { 223,1810 }, { 224,1810 }, { 225,1810 },
 { 226,1810 }, { 227,1810 }, { 228,1810 }, { 229,1810 }, { 230,1810 },
 { 231,1810 }, { 232,1810 }, { 233,1810 }, { 234,1810 }, { 235,1810 },

 { 236,1810 }, { 237,1810 }, { 238,1810 }, { 239,1810 }, { 240,1810 },
 { 241,1810 }, { 242,1810 }, { 243,1810 }, { 244,1810 }, { 245,1810 },
 { 246,1810 }, { 247,1810 }, { 248,1810 }, { 249,1810 }, { 250,1810 },
 { 251,1810 }, { 252,1810 }, { 253,1810 }, { 254,1810 }, { 255,1810 },
 { 256,1810 }, {   0,   0 }, {   0,3624 }, {   0,   0 }, {   0,   0 },
 {   0,3621 }, {   0,   0 }, {   0,   0 }, {   0,3618 }, {   0,  35 },
 {   0,3616 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,  57 },
 {   0,3601 }, {   0,  57 }, {   0,3599 }, {   0,  14 }, {   0,3597 },

 {   0,  19 }, {   0,3595 }, {   0,  30 }, {   0,3593 }, {   0,  31 },
 {   0,3591 }, {   0,  32 }, {   0,3589 }, {   0,  20 }, {   0,3587 },
 {   0,  41 }, {   0,3585 }, {   0,  13 }, {   0,3583 }, {   0,  37 },
 {   0,3581 }, {   0,  55 }, {   0,3579 }, {   0,  45 }, {   0,3577 },
 {  48,1810 }, {  49,1810 }, {  50,1810 }, {  51,1810 }, {  52,1810 },
 {  53,1810 }, {  54,1810 }, {  55,1810 }, {  56,1810 }, {  57,1810 },
 {  35,1810 }, {   0,   0 }, {  35,1808 }, {   0,   0 }, {  39,1891 },
 {   0,   0 }, {  39,2250 }, {  65,1810 }, {  66,1810 }, {  67,1810 },
 {  68,1810 }, {  69,1810 }, {  70,1810 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },

 {  55,   0 }, {  56,   0 }, {  57,   0 }, {  78,2169 }, {   0,  56 },
 {   0,3541 }, {  78,2168 }, {   0,  27 }, {   0,3538 }, {   0,  48 },
 {   0,3536 }, {   0,  53 }, {   0,3534 }, {   0,  49 }, {   0,3532 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  97,1810 },
 {  98,1810 }, {  99,1810 }, { 100,1810 }, { 101,1810 }, { 102,1810 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 { 110,2169 }, {   0,  26 }, {   0,3509 }, { 110,2168 }, {   0,   0 },
 {   0,   0 }, {  36,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  61,2090 },
 {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 },
 {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 },
 {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 },
 {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 },
 {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 },
 {  90,   0 }, {   0,   0 }, {   0,   0 }, {  61,2063 }, {   0,   0 },

 {  95,   0 }, {   0,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 },
 { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 },
 { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 },
 { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 },
 { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 },
 { 120,   0 }, { 121,   0 }, { 122,   0 }, {   0,   0 }, {   0,3417 },
 {   1,   0 }, {   2,   0 }, {   3,   0 }, {   4,   0 }, {   5,   0 },
 {   6,   0 }, {   7,   0 }, {   8,   0 }, {   9,   0 }, {  10,   0 },
 {  11,   0 }, {  12,   0 }, {  13,   0 }, {  14,   0 }, {  15,   0 },
 {  16,   0 }, {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 },

 {  21,   0 }, {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 },
 {  26,   0 }, {  27,   0 }, {  28,   0 }, {  29,   0 }, {  30,   0 },
 {  31,   0 }, {  32,   0 }, {  33,   0 }, {  34,   0 }, {  35,   0 },
 {  36,   0 }, {  37,   0 }, {  38,   0 }, {  39,-182 }, {  40,   0 },
 {  41,   0 }, {  42,   0 }, {  43,   0 }, {  44,   0 }, {  45,   0 },
 {  46,   0 }, {  47,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {  58,   0 }, {  59,   0 }, {  60,   0 },
 {  61,   0 }, {  62,   0 }, {  63,   0 }, {  64,   0 }, {  65,   0 },
 {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 },

 {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 },
 {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 },
 {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 },
 {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 },
 {  91,   0 }, {  92,   0 }, {  93,   0 }, {  94,   0 }, {  95,   0 },
 {  96,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 },
 { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 },
 { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 },
 { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 },
 { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 },

 { 121,   0 }, { 122,   0 }, { 123,   0 }, { 124,   0 }, { 125,   0 },
 { 126,   0 }, { 127,   0 }, { 128,   0 }, { 129,   0 }, { 130,   0 },
 { 131,   0 }, { 132,   0 }, { 133,   0 }, { 134,   0 }, { 135,   0 },
 { 136,   0 }, { 137,   0 }, { 138,   0 }, { 139,   0 }, { 140,   0 },
 { 141,   0 }, { 142,   0 }, { 143,   0 }, { 144,   0 }, { 145,   0 },
 { 146,   0 }, { 147,   0 }, { 148,   0 }, { 149,   0 }, { 150,   0 },
 { 151,   0 }, { 152,   0 }, { 153,   0 }, { 154,   0 }, { 155,   0 },
 { 156,   0 }, { 157,   0 }, { 158,   0 }, { 159,   0 }, { 160,   0 },
 { 161,   0 }, { 162,   0 }, { 163,   0 }, { 164,   0 }, { 165,   0 },
 { 166,   0 }, { 167,   0 }, { 168,   0 }, { 169,   0 }, { 170,   0 },

 { 171,   0 }, { 172,   0 }, { 173,   0 }, { 174,   0 }, { 175,   0 },
 { 176,   0 }, { 177,   0 }, { 178,   0 }, { 179,   0 }, { 180,   0 },
 { 181,   0 }, { 182,   0 }, { 183,   0 }, { 184,   0 }, { 185,   0 },
 { 186,   0 }, { 187,   0 }, { 188,   0 }, { 189,   0 }, { 190,   0 },
 { 191,   0 }, { 192,   0 }, { 193,   0 }, { 194,   0 }, { 195,   0 },
 { 196,   0 }, { 197,   0 }, { 198,   0 }, { 199,   0 }, { 200,   0 },
 { 201,   0 }, { 202,   0 }, { 203,   0 }, { 204,   0 }, { 205,   0 },
 { 206,   0 }, { 207,   0 }, { 208,   0 }, { 209,   0 }, { 210,   0 },
 { 211,   0 }, { 212,   0 }, { 213,   0 }, { 214,   0 }, { 215,   0 },
 { 216,   0 }, { 217,   0 }, { 218,   0 }, { 219,   0 }, { 220,   0 },

 { 221,   0 }, { 222,   0 }, { 223,   0 }, { 224,   0 }, { 225,   0 },
 { 226,   0 }, { 227,   0 }, { 228,   0 }, { 229,   0 }, { 230,   0 },
 { 231,   0 }, { 232,   0 }, { 233,   0 }, { 234,   0 }, { 235,   0 },
 { 236,   0 }, { 237,   0 }, { 238,   0 }, { 239,   0 }, { 240,   0 },
 { 241,   0 }, { 242,   0 }, { 243,   0 }, { 244,   0 }, { 245,   0 },
 { 246,   0 }, { 247,   0 }, { 248,   0 }, { 249,   0 }, { 250,   0 },
 { 251,   0 }, { 252,   0 }, { 253,   0 }, { 254,   0 }, { 255,   0 },
 { 256,   0 }, {   0,   0 }, {   0,3159 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,3145 }, {   0,  15 }, {   0,3143 }, {   0,  36 },
 {   0,3141 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,3136 }, {   0,  10 }, {   0,3134 }, {   0,   0 }, {   0,   9 },
 {   0,3131 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   9,   0 },
 {  10,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  48,2068 }, {  49,2068 }, {  50,2068 }, {  51,2068 }, {  52,2068 },
 {  53,2068 }, {  54,2068 }, {  55,2068 }, {  56,2068 }, {  57,2068 },
 {   0,  55 }, {   0,3100 }, {  32,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  65,2068 }, {  66,2068 }, {  67,2068 },
 {  68,2068 }, {  69,2068 }, {  70,2068 }, {  48,2068 }, {  49,2068 },
 {  50,2068 }, {  51,2068 }, {  52,2068 }, {  53,2068 }, {  54,2068 },
 {  55,2068 }, {  56,2068 }, {  57,2068 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  59,   0 }, {   0,   0 }, {   0,   0 }, {  73,2381 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  35, -59 }, {   0,   0 }, {   0,   0 }, {  97,2068 },
 {  98,2068 }, {  99,2068 }, { 100,2068 }, { 101,2068 }, { 102,2068 },
 {   0,   0 }, {   0,   0 }, {  46, -36 }, {   0,   0 }, {  48,2069 },
 {  49,2069 }, {  50,2069 }, {  51,2069 }, {  52,2069 }, {  53,2069 },

 {  54,2069 }, {  55,2069 }, {  56,2069 }, {  57,2069 }, {   0,   0 },
 {   0,3041 }, { 105,2381 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,  59 }, {  66, 118 }, {  67,  59 }, {  68,  59 },
 {  69, 178 }, {  70,  59 }, {   0,   0 }, {  72,-479 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  97,  59 }, {  98, 118 },
 {  99,  59 }, { 100,  59 }, { 101, 178 }, { 102,  59 }, {   0,   0 },

 { 104,-479 }, {   0,   0 }, {   0,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,  55 }, {   0,2982 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 },
 {  70,   0 }, {   0,   0 }, {  72,-538 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 },
 { 100,   0 }, { 101,   0 }, { 102,   0 }, {   0,   0 }, { 104,-538 },
 {   0,   0 }, {   0,   0 }, {  48, -59 }, {  49, -59 }, {  50, -59 },
 {  51, -59 }, {  52, -59 }, {  53, -59 }, {  54, -59 }, {  55, -59 },
 {  56, -59 }, {  57, -59 }, {   0,   0 }, {   0,   0 }, {   0,2922 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65, -59 },
 {  66, -59 }, {  67, -59 }, {  68, -59 }, {  69, -59 }, {  70, -59 },
 {   0,   0 }, {  72,-597 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,2897 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  97, -59 }, {  98, -59 }, {  99, -59 }, { 100, -59 },
 { 101, -59 }, { 102, -59 }, {  43,1916 }, { 104,-597 }, {  45,1916 },
 {   0,   0 }, {   0,   0 }, {  48,1950 }, {  49,1950 }, {  50,1950 },
 {  51,1950 }, {  52,1950 }, {  53,1950 }, {  54,1950 }, {  55,1950 },
 {  56,1950 }, {  57,1950 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-119 },
 {  66,-119 }, {  67,-119 }, {  68,-119 }, {  69,-119 }, {  70,-119 },
 {   0,   0 }, {  72,-657 }, {  48,1950 }, {  49,1950 }, {  50,1950 },

 {  51,1950 }, {  52,1950 }, {  53,1950 }, {  54,1950 }, {  55,1950 },
 {  56,1950 }, {  57,1950 }, {   0,  56 }, {   0,2838 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,1950 },
 {  66,1950 }, {  67,1950 }, {  68,1950 }, {  69,1950 }, {  70,1950 },
 {   0,   0 }, {  97,-119 }, {  98,-119 }, {  99,-119 }, { 100,-119 },
 { 101,-119 }, { 102,-119 }, {   0,   0 }, { 104,-657 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  36,-703 },
 {   0,   0 }, {  97,1950 }, {  98,1950 }, {  99,1950 }, { 100,1950 },

 { 101,1950 }, { 102,1950 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48,-703 }, {  49,-703 }, {  50,-703 }, {  51,-703 },
 {  52,-703 }, {  53,-703 }, {  54,-703 }, {  55,-703 }, {  56,-703 },
 {  57,-703 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-703 }, {  66,-703 },
 {  67,-703 }, {  68,-703 }, {  69,1950 }, {  70,-703 }, {  71,-703 },
 {  72,-703 }, {  73,-703 }, {  74,-703 }, {  75,-703 }, {  76,-703 },
 {  77,-703 }, {  78,-703 }, {  79,-703 }, {  80,-703 }, {  81,-703 },
 {  82,-703 }, {  83,-703 }, {  84,-703 }, {  85,-703 }, {  86,-703 },
 {  87,-703 }, {  88,-703 }, {  89,-703 }, {  90,-703 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  95,-703 }, {   0,   0 },
 {  97,-703 }, {  98,-703 }, {  99,-703 }, { 100,-703 }, { 101,1950 },
 { 102,-703 }, { 103,-703 }, { 104,-703 }, { 105,-703 }, { 106,-703 },
 { 107,-703 }, { 108,-703 }, { 109,-703 }, { 110,-703 }, { 111,-703 },
 { 112,-703 }, { 113,-703 }, { 114,-703 }, { 115,-703 }, { 116,-703 },
 { 117,-703 }, { 118,-703 }, { 119,-703 }, { 120,-703 }, { 121,-703 },
 { 122,-703 }, {   0,  10 }, {   0,2714 }, {   1,   0 }, {   2,   0 },
 {   3,   0 }, {   4,   0 }, {   5,   0 }, {   6,   0 }, {   7,   0 },
 {   8,   0 }, {   9,   0 }, {   0,   0 }, {  11,   0 }, {  12,   0 },
 {  13,   0 }, {  14,   0 }, {  15,   0 }, {  16,   0 }, {  17,   0 },

 {  18,   0 }, {  19,   0 }, {  20,   0 }, {  21,   0 }, {  22,   0 },
 {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 },
 {  28,   0 }, {  29,   0 }, {  30,   0 }, {  31,   0 }, {  32,   0 },
 {  33,   0 }, {  34,   0 }, {  35,   0 }, {  36,   0 }, {  37,   0 },
 {  38,   0 }, {  39,   0 }, {  40,   0 }, {  41,   0 }, {  42,   0 },
 {  43,   0 }, {  44,   0 }, {  45,   0 }, {  46,   0 }, {  47,   0 },
 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 },
 {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 },
 {  58,   0 }, {  59,-420 }, {  60,   0 }, {  61,   0 }, {  62,   0 },
 {  63,   0 }, {  64,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 },

 {  68,   0 }, {  69,   0 }, {  70,   0 }, {  71,   0 }, {  72,   0 },
 {  73,   0 }, {  74,   0 }, {  75,   0 }, {  76,   0 }, {  77,   0 },
 {  78,   0 }, {  79,   0 }, {  80,   0 }, {  81,   0 }, {  82,   0 },
 {  83,   0 }, {  84,   0 }, {  85,   0 }, {  86,   0 }, {  87,   0 },
 {  88,   0 }, {  89,   0 }, {  90,   0 }, {  91,   0 }, {  92,   0 },
 {  93,   0 }, {  94,   0 }, {  95,   0 }, {  96,   0 }, {  97,   0 },
 {  98,   0 }, {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 },
 { 103,   0 }, { 104,   0 }, { 105,   0 }, { 106,   0 }, { 107,   0 },
 { 108,   0 }, { 109,   0 }, { 110,   0 }, { 111,   0 }, { 112,   0 },
 { 113,   0 }, { 114,   0 }, { 115,   0 }, { 116,   0 }, { 117,   0 },

 { 118,   0 }, { 119,   0 }, { 120,   0 }, { 121,   0 }, { 122,   0 },
 { 123,   0 }, { 124,   0 }, { 125,   0 }, { 126,   0 }, { 127,   0 },
 { 128,   0 }, { 129,   0 }, { 130,   0 }, { 131,   0 }, { 132,   0 },
 { 133,   0 }, { 134,   0 }, { 135,   0 }, { 136,   0 }, { 137,   0 },
 { 138,   0 }, { 139,   0 }, { 140,   0 }, { 141,   0 }, { 142,   0 },
 { 143,   0 }, { 144,   0 }, { 145,   0 }, { 146,   0 }, { 147,   0 },
 { 148,   0 }, { 149,   0 }, { 150,   0 }, { 151,   0 }, { 152,   0 },
 { 153,   0 }, { 154,   0 }, { 155,   0 }, { 156,   0 }, { 157,   0 },
 { 158,   0 }, { 159,   0 }, { 160,   0 }, { 161,   0 }, { 162,   0 },
 { 163,   0 }, { 164,   0 }, { 165,   0 }, { 166,   0 }, { 167,   0 },

 { 168,   0 }, { 169,   0 }, { 170,   0 }, { 171,   0 }, { 172,   0 },
 { 173,   0 }, { 174,   0 }, { 175,   0 }, { 176,   0 }, { 177,   0 },
 { 178,   0 }, { 179,   0 }, { 180,   0 }, { 181,   0 }, { 182,   0 },
 { 183,   0 }, { 184,   0 }, { 185,   0 }, { 186,   0 }, { 187,   0 },
 { 188,   0 }, { 189,   0 }, { 190,   0 }, { 191,   0 }, { 192,   0 },
 { 193,   0 }, { 194,   0 }, { 195,   0 }, { 196,   0 }, { 197,   0 },
 { 198,   0 }, { 199,   0 }, { 200,   0 }, { 201,   0 }, { 202,   0 },
 { 203,   0 }, { 204,   0 }, { 205,   0 }, { 206,   0 }, { 207,   0 },
 { 208,   0 }, { 209,   0 }, { 210,   0 }, { 211,   0 }, { 212,   0 },
 { 213,   0 }, { 214,   0 }, { 215,   0 }, { 216,   0 }, { 217,   0 },

 { 218,   0 }, { 219,   0 }, { 220,   0 }, { 221,   0 }, { 222,   0 },
 { 223,   0 }, { 224,   0 }, { 225,   0 }, { 226,   0 }, { 227,   0 },
 { 228,   0 }, { 229,   0 }, { 230,   0 }, { 231,   0 }, { 232,   0 },
 { 233,   0 }, { 234,   0 }, { 235,   0 }, { 236,   0 }, { 237,   0 },
 { 238,   0 }, { 239,   0 }, { 240,   0 }, { 241,   0 }, { 242,   0 },
 { 243,   0 }, { 244,   0 }, { 245,   0 }, { 246,   0 }, { 247,   0 },
 { 248,   0 }, { 249,   0 }, { 250,   0 }, { 251,   0 }, { 252,   0 },
 { 253,   0 }, { 254,   0 }, { 255,   0 }, { 256,   0 }, {   0,   9 },
 {   0,2456 }, {   1,-258 }, {   2,-258 }, {   3,-258 }, {   4,-258 },
 {   5,-258 }, {   6,-258 }, {   7,-258 }, {   8,-258 }, {   9,   0 },

 {  10,-675 }, {  11,-258 }, {  12,-258 }, {  13,-258 }, {  14,-258 },
 {  15,-258 }, {  16,-258 }, {  17,-258 }, {  18,-258 }, {  19,-258 },
 {  20,-258 }, {  21,-258 }, {  22,-258 }, {  23,-258 }, {  24,-258 },
 {  25,-258 }, {  26,-258 }, {  27,-258 }, {  28,-258 }, {  29,-258 },
 {  30,-258 }, {  31,-258 }, {  32,   0 }, {  33,-258 }, {  34,-258 },
 {  35,-258 }, {  36,-258 }, {  37,-258 }, {  38,-258 }, {  39,-258 },
 {  40,-258 }, {  41,-258 }, {  42,-258 }, {  43,-258 }, {  44,-258 },
 {  45,-258 }, {  46,-258 }, {  47,-258 }, {  48,-258 }, {  49,-258 },
 {  50,-258 }, {  51,-258 }, {  52,-258 }, {  53,-258 }, {  54,-258 },
 {  55,-258 }, {  56,-258 }, {  57,-258 }, {  58,-258 }, {  59,-678 },

 {  60,-258 }, {  61,-258 }, {  62,-258 }, {  63,-258 }, {  64,-258 },
 {  65,-258 }, {  66,-258 }, {  67,-258 }, {  68,-258 }, {  69,-258 },
 {  70,-258 }, {  71,-258 }, {  72,-258 }, {  73,-258 }, {  74,-258 },
 {  75,-258 }, {  76,-258 }, {  77,-258 }, {  78,-258 }, {  79,-258 },
 {  80,-258 }, {  81,-258 }, {  82,-258 }, {  83,-258 }, {  84,-258 },
 {  85,-258 }, {  86,-258 }, {  87,-258 }, {  88,-258 }, {  89,-258 },
 {  90,-258 }, {  91,-258 }, {  92,-258 }, {  93,-258 }, {  94,-258 },
 {  95,-258 }, {  96,-258 }, {  97,-258 }, {  98,-258 }, {  99,-258 },
 { 100,-258 }, { 101,-258 }, { 102,-258 }, { 103,-258 }, { 104,-258 },
 { 105,-258 }, { 106,-258 }, { 107,-258 }, { 108,-258 }, { 109,-258 },

 { 110,-258 }, { 111,-258 }, { 112,-258 }, { 113,-258 }, { 114,-258 },
 { 115,-258 }, { 116,-258 }, { 117,-258 }, { 118,-258 }, { 119,-258 },
 { 120,-258 }, { 121,-258 }, { 122,-258 }, { 123,-258 }, { 124,-258 },
 { 125,-258 }, { 126,-258 }, { 127,-258 }, { 128,-258 }, { 129,-258 },
 { 130,-258 }, { 131,-258 }, { 132,-258 }, { 133,-258 }, { 134,-258 },
 { 135,-258 }, { 136,-258 }, { 137,-258 }, { 138,-258 }, { 139,-258 },
 { 140,-258 }, { 141,-258 }, { 142,-258 }, { 143,-258 }, { 144,-258 },
 { 145,-258 }, { 146,-258 }, { 147,-258 }, { 148,-258 }, { 149,-258 },
 { 150,-258 }, { 151,-258 }, { 152,-258 }, { 153,-258 }, { 154,-258 },
 { 155,-258 }, { 156,-258 }, { 157,-258 }, { 158,-258 }, { 159,-258 },

 { 160,-258 }, { 161,-258 }, { 162,-258 }, { 163,-258 }, { 164,-258 },
 { 165,-258 }, { 166,-258 }, { 167,-258 }, { 168,-258 }, { 169,-258 },
 { 170,-258 }, { 171,-258 }, { 172,-258 }, { 173,-258 }, { 174,-258 },
 { 175,-258 }, { 176,-258 }, { 177,-258 }, { 178,-258 }, { 179,-258 },
 { 180,-258 }, { 181,-258 }, { 182,-258 }, { 183,-258 }, { 184,-258 },
 { 185,-258 }, { 186,-258 }, { 187,-258 }, { 188,-258 }, { 189,-258 },
 { 190,-258 }, { 191,-258 }, { 192,-258 }, { 193,-258 }, { 194,-258 },
 { 195,-258 }, { 196,-258 }, { 197,-258 }, { 198,-258 }, { 199,-258 },
 { 200,-258 }, { 201,-258 }, { 202,-258 }, { 203,-258 }, { 204,-258 },
 { 205,-258 }, { 206,-258 }, { 207,-258 }, { 208,-258 }, { 209,-258 },

 { 210,-258 }, { 211,-258 }, { 212,-258 }, { 213,-258 }, { 214,-258 },
 { 215,-258 }, { 216,-258 }, { 217,-258 }, { 218,-258 }, { 219,-258 },
 { 220,-258 }, { 221,-258 }, { 222,-258 }, { 223,-258 }, { 224,-258 },
 { 225,-258 }, { 226,-258 }, { 227,-258 }, { 228,-258 }, { 229,-258 },
 { 230,-258 }, { 231,-258 }, { 232,-258 }, { 233,-258 }, { 234,-258 },
 { 235,-258 }, { 236,-258 }, { 237,-258 }, { 238,-258 }, { 239,-258 },
 { 240,-258 }, { 241,-258 }, { 242,-258 }, { 243,-258 }, { 244,-258 },
 { 245,-258 }, { 246,-258 }, { 247,-258 }, { 248,-258 }, { 249,-258 },
 { 250,-258 }, { 251,-258 }, { 252,-258 }, { 253,-258 }, { 254,-258 },
 { 255,-258 }, { 256,-258 }, {   0,   4 }, {   0,2198 }, {   0,   6 },

 {   0,2196 }, {   0,   5 }, {   0,2194 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   9,   0 }, {  10,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  32,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  44,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,   0 }, {  49,   0 },

 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 },
 {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 },
 {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 },
 {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 },
 {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 },
 {  90,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  95,   0 }, {   0,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 },

 { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 },
 { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 },
 { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 },
 { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 },
 { 120,   0 }, { 121,   0 }, { 122,   0 }, {   0,   0 }, {   0,2072 },
 {   1,   0 }, {   2,   0 }, {   3,   0 }, {   4,   0 }, {   5,   0 },
 {   6,   0 }, {   7,   0 }, {   8,   0 }, {   9,   0 }, {  10,   0 },
 {  11,   0 }, {  12,   0 }, {  13,   0 }, {  14,   0 }, {  15,   0 },
 {  16,   0 }, {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 },
 {  21,   0 }, {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 },

 {  26,   0 }, {  27,   0 }, {  28,   0 }, {  29,   0 }, {  30,   0 },
 {  31,   0 }, {  32,   0 }, {  33,   0 }, {  34,   0 }, {  35,   0 },
 {  36,   0 }, {  37,   0 }, {  38,   0 }, {  39,   0 }, {  40,   0 },
 {  41,   0 }, {  42,   0 }, {  43,   0 }, {  44,   0 }, {  45,   0 },
 {  46,   0 }, {  47,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {  58,   0 }, {  59,   0 }, {  60,   0 },
 {  61,   0 }, {  62,   0 }, {  63,   0 }, {  64,   0 }, {  65,   0 },
 {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 },
 {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 },

 {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 },
 {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 },
 {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 },
 {  91,   0 }, {  92,   0 }, {  93,   0 }, {  94,   0 }, {  95,   0 },
 {  96,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 },
 { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 },
 { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 },
 { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 },
 { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 },
 { 121,   0 }, { 122,   0 }, { 123,   0 }, { 124,   0 }, { 125,-122 },

 { 126,   0 }, { 127,   0 }, { 128,   0 }, { 129,   0 }, { 130,   0 },
 { 131,   0 }, { 132,   0 }, { 133,   0 }, { 134,   0 }, { 135,   0 },
 { 136,   0 }, { 137,   0 }, { 138,   0 }, { 139,   0 }, { 140,   0 },
 { 141,   0 }, { 142,   0 }, { 143,   0 }, { 144,   0 }, { 145,   0 },
 { 146,   0 }, { 147,   0 }, { 148,   0 }, { 149,   0 }, { 150,   0 },
 { 151,   0 }, { 152,   0 }, { 153,   0 }, { 154,   0 }, { 155,   0 },
 { 156,   0 }, { 157,   0 }, { 158,   0 }, { 159,   0 }, { 160,   0 },
 { 161,   0 }, { 162,   0 }, { 163,   0 }, { 164,   0 }, { 165,   0 },
 { 166,   0 }, { 167,   0 }, { 168,   0 }, { 169,   0 }, { 170,   0 },
 { 171,   0 }, { 172,   0 }, { 173,   0 }, { 174,   0 }, { 175,   0 },

 { 176,   0 }, { 177,   0 }, { 178,   0 }, { 179,   0 }, { 180,   0 },
 { 181,   0 }, { 182,   0 }, { 183,   0 }, { 184,   0 }, { 185,   0 },
 { 186,   0 }, { 187,   0 }, { 188,   0 }, { 189,   0 }, { 190,   0 },
 { 191,   0 }, { 192,   0 }, { 193,   0 }, { 194,   0 }, { 195,   0 },
 { 196,   0 }, { 197,   0 }, { 198,   0 }, { 199,   0 }, { 200,   0 },
 { 201,   0 }, { 202,   0 }, { 203,   0 }, { 204,   0 }, { 205,   0 },
 { 206,   0 }, { 207,   0 }, { 208,   0 }, { 209,   0 }, { 210,   0 },
 { 211,   0 }, { 212,   0 }, { 213,   0 }, { 214,   0 }, { 215,   0 },
 { 216,   0 }, { 217,   0 }, { 218,   0 }, { 219,   0 }, { 220,   0 },
 { 221,   0 }, { 222,   0 }, { 223,   0 }, { 224,   0 }, { 225,   0 },

 { 226,   0 }, { 227,   0 }, { 228,   0 }, { 229,   0 }, { 230,   0 },
 { 231,   0 }, { 232,   0 }, { 233,   0 }, { 234,   0 }, { 235,   0 },
 { 236,   0 }, { 237,   0 }, { 238,   0 }, { 239,   0 }, { 240,   0 },
 { 241,   0 }, { 242,   0 }, { 243,   0 }, { 244,   0 }, { 245,   0 },
 { 246,   0 }, { 247,   0 }, { 248,   0 }, { 249,   0 }, { 250,   0 },
 { 251,   0 }, { 252,   0 }, { 253,   0 }, { 254,   0 }, { 255,   0 },
 { 256,   0 }, {   0,  57 }, {   0,1814 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,1791 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  35,  23 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  39, 104 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 },
 {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 },
 {   0,   0 }, {  36,-1833 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 },

 {  68,   0 }, {  69,   0 }, {  70,   0 }, {  48,-1810 }, {  49,-1810 },
 {  50,-1810 }, {  51,-1810 }, {  52,-1810 }, {  53,-1810 }, {  54,-1810 },
 {  55,-1810 }, {  56,-1810 }, {  57,-1810 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  97,   0 },
 {  98,   0 }, {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 },
 {   0,   0 }, {   0,1710 }, {   1,-1707 }, {   2,-1707 }, {   3,-1707 },
 {   4,-1707 }, {   5,-1707 }, {   6,-1707 }, {   7,-1707 }, {   8,-1707 },
 {   9,-1707 }, {  10,-1707 }, {  11,-1707 }, {  12,-1707 }, {  13,-1707 },

 {  14,-1707 }, {  15,-1707 }, {  16,-1707 }, {  17,-1707 }, {  18,-1707 },
 {  19,-1707 }, {  20,-1707 }, {  21,-1707 }, {  22,-1707 }, {  23,-1707 },
 {  24,-1707 }, {  25,-1707 }, {  26,-1707 }, {  27,-1707 }, {  28,-1707 },
 {  29,-1707 }, {  30,-1707 }, {  31,-1707 }, {  32,-1707 }, {  33,-1707 },
 {  34,-1707 }, {  35,-1707 }, {  36,-1707 }, {  37,-1707 }, {  38,-1707 },
 {  39,-1889 }, {  40,-1707 }, {  41,-1707 }, {  42,-1707 }, {  43,-1707 },
 {  44,-1707 }, {  45,-1707 }, {  46,-1707 }, {  47,-1707 }, {  48,-1707 },
 {  49,-1707 }, {  50,-1707 }, {  51,-1707 }, {  52,-1707 }, {  53,-1707 },
 {  54,-1707 }, {  55,-1707 }, {  56,-1707 }, {  57,-1707 }, {  58,-1707 },
 {  59,-1707 }, {  60,-1707 }, {  61,-1707 }, {  62,-1707 }, {  63,-1707 },

 {  64,-1707 }, {  65,-1707 }, {  66,-1707 }, {  67,-1707 }, {  68,-1707 },
 {  69,-1707 }, {  70,-1707 }, {  71,-1707 }, {  72,-1707 }, {  73,-1707 },
 {  74,-1707 }, {  75,-1707 }, {  76,-1707 }, {  77,-1707 }, {  78,-1707 },
 {  79,-1707 }, {  80,-1707 }, {  81,-1707 }, {  82,-1707 }, {  83,-1707 },
 {  84,-1707 }, {  85,-1707 }, {  86,-1707 }, {  87,-1707 }, {  88,-1707 },
 {  89,-1707 }, {  90,-1707 }, {  91,-1707 }, {  92,-1707 }, {  93,-1707 },
 {  94,-1707 }, {  95,-1707 }, {  96,-1707 }, {  97,-1707 }, {  98,-1707 },
 {  99,-1707 }, { 100,-1707 }, { 101,-1707 }, { 102,-1707 }, { 103,-1707 },
 { 104,-1707 }, { 105,-1707 }, { 106,-1707 }, { 107,-1707 }, { 108,-1707 },
 { 109,-1707 }, { 110,-1707 }, { 111,-1707 }, { 112,-1707 }, { 113,-1707 },

 { 114,-1707 }, { 115,-1707 }, { 116,-1707 }, { 117,-1707 }, { 118,-1707 },
 { 119,-1707 }, { 120,-1707 }, { 121,-1707 }, { 122,-1707 }, { 123,-1707 },
 { 124,-1707 }, { 125,-1707 }, { 126,-1707 }, { 127,-1707 }, { 128,-1707 },
 { 129,-1707 }, { 130,-1707 }, { 131,-1707 }, { 132,-1707 }, { 133,-1707 },
 { 134,-1707 }, { 135,-1707 }, { 136,-1707 }, { 137,-1707 }, { 138,-1707 },
 { 139,-1707 }, { 140,-1707 }, { 141,-1707 }, { 142,-1707 }, { 143,-1707 },
 { 144,-1707 }, { 145,-1707 }, { 146,-1707 }, { 147,-1707 }, { 148,-1707 },
 { 149,-1707 }, { 150,-1707 }, { 151,-1707 }, { 152,-1707 }, { 153,-1707 },
 { 154,-1707 }, { 155,-1707 }, { 156,-1707 }, { 157,-1707 }, { 158,-1707 },
 { 159,-1707 }, { 160,-1707 }, { 161,-1707 }, { 162,-1707 }, { 163,-1707 },

 { 164,-1707 }, { 165,-1707 }, { 166,-1707 }, { 167,-1707 }, { 168,-1707 },
 { 169,-1707 }, { 170,-1707 }, { 171,-1707 }, { 172,-1707 }, { 173,-1707 },
 { 174,-1707 }, { 175,-1707 }, { 176,-1707 }, { 177,-1707 }, { 178,-1707 },
 { 179,-1707 }, { 180,-1707 }, { 181,-1707 }, { 182,-1707 }, { 183,-1707 },
 { 184,-1707 }, { 185,-1707 }, { 186,-1707 }, { 187,-1707 }, { 188,-1707 },
 { 189,-1707 }, { 190,-1707 }, { 191,-1707 }, { 192,-1707 }, { 193,-1707 },
 { 194,-1707 }, { 195,-1707 }, { 196,-1707 }, { 197,-1707 }, { 198,-1707 },
 { 199,-1707 }, { 200,-1707 }, { 201,-1707 }, { 202,-1707 }, { 203,-1707 },
 { 204,-1707 }, { 205,-1707 }, { 206,-1707 }, { 207,-1707 }, { 208,-1707 },
 { 209,-1707 }, { 210,-1707 }, { 211,-1707 }, { 212,-1707 }, { 213,-1707 },

 { 214,-1707 }, { 215,-1707 }, { 216,-1707 }, { 217,-1707 }, { 218,-1707 },
 { 219,-1707 }, { 220,-1707 }, { 221,-1707 }, { 222,-1707 }, { 223,-1707 },
 { 224,-1707 }, { 225,-1707 }, { 226,-1707 }, { 227,-1707 }, { 228,-1707 },
 { 229,-1707 }, { 230,-1707 }, { 231,-1707 }, { 232,-1707 }, { 233,-1707 },
 { 234,-1707 }, { 235,-1707 }, { 236,-1707 }, { 237,-1707 }, { 238,-1707 },
 { 239,-1707 }, { 240,-1707 }, { 241,-1707 }, { 242,-1707 }, { 243,-1707 },
 { 244,-1707 }, { 245,-1707 }, { 246,-1707 }, { 247,-1707 }, { 248,-1707 },
 { 249,-1707 }, { 250,-1707 }, { 251,-1707 }, { 252,-1707 }, { 253,-1707 },
 { 254,-1707 }, { 255,-1707 }, { 256,-1707 }, {   0,   0 }, {   0,1452 },
 {   0,   0 }, {   0,1450 }, {   0,  34 }, {   0,1448 }, {   0,  33 },

 {   0,1446 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  67, 373 }, {   0,   0 }, {  67, 373 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  99, 373 }, {   0,   0 },
 {  99, 373 }, {   0,   0 }, {   0,1349 }, {   1,-2068 }, {   2,-2068 },

 {   3,-2068 }, {   4,-2068 }, {   5,-2068 }, {   6,-2068 }, {   7,-2068 },
 {   8,-2068 }, {   9,-2068 }, {  10,-2068 }, {  11,-2068 }, {  12,-2068 },
 {  13,-2068 }, {  14,-2068 }, {  15,-2068 }, {  16,-2068 }, {  17,-2068 },
 {  18,-2068 }, {  19,-2068 }, {  20,-2068 }, {  21,-2068 }, {  22,-2068 },
 {  23,-2068 }, {  24,-2068 }, {  25,-2068 }, {  26,-2068 }, {  27,-2068 },
 {  28,-2068 }, {  29,-2068 }, {  30,-2068 }, {  31,-2068 }, {  32,-2068 },
 {  33,-2068 }, {  34,-2068 }, {  35,-2068 }, {  36,-2068 }, {  37,-2068 },
 {  38,-2068 }, {  39,-2250 }, {  40,-2068 }, {  41,-2068 }, {  42,-2068 },
 {  43,-2068 }, {  44,-2068 }, {  45,-2068 }, {  46,-2068 }, {  47,-2068 },
 {  48,-2068 }, {  49,-2068 }, {  50,-2068 }, {  51,-2068 }, {  52,-2068 },

 {  53,-2068 }, {  54,-2068 }, {  55,-2068 }, {  56,-2068 }, {  57,-2068 },
 {  58,-2068 }, {  59,-2068 }, {  60,-2068 }, {  61,-2068 }, {  62,-2068 },
 {  63,-2068 }, {  64,-2068 }, {  65,-2068 }, {  66,-2068 }, {  67,-2068 },
 {  68,-2068 }, {  69,-2068 }, {  70,-2068 }, {  71,-2068 }, {  72,-2068 },
 {  73,-2068 }, {  74,-2068 }, {  75,-2068 }, {  76,-2068 }, {  77,-2068 },
 {  78,-2068 }, {  79,-2068 }, {  80,-2068 }, {  81,-2068 }, {  82,-2068 },
 {  83,-2068 }, {  84,-2068 }, {  85,-2068 }, {  86,-2068 }, {  87,-2068 },
 {  88,-2068 }, {  89,-2068 }, {  90,-2068 }, {  91,-2068 }, {  92,-2068 },
 {  93,-2068 }, {  94,-2068 }, {  95,-2068 }, {  96,-2068 }, {  97,-2068 },
 {  98,-2068 }, {  99,-2068 }, { 100,-2068 }, { 101,-2068 }, { 102,-2068 },

 { 103,-2068 }, { 104,-2068 }, { 105,-2068 }, { 106,-2068 }, { 107,-2068 },
 { 108,-2068 }, { 109,-2068 }, { 110,-2068 }, { 111,-2068 }, { 112,-2068 },
 { 113,-2068 }, { 114,-2068 }, { 115,-2068 }, { 116,-2068 }, { 117,-2068 },
 { 118,-2068 }, { 119,-2068 }, { 120,-2068 }, { 121,-2068 }, { 122,-2068 },
 { 123,-2068 }, { 124,-2068 }, { 125,-2068 }, { 126,-2068 }, { 127,-2068 },
 { 128,-2068 }, { 129,-2068 }, { 130,-2068 }, { 131,-2068 }, { 132,-2068 },
 { 133,-2068 }, { 134,-2068 }, { 135,-2068 }, { 136,-2068 }, { 137,-2068 },
 { 138,-2068 }, { 139,-2068 }, { 140,-2068 }, { 141,-2068 }, { 142,-2068 },
 { 143,-2068 }, { 144,-2068 }, { 145,-2068 }, { 146,-2068 }, { 147,-2068 },
 { 148,-2068 }, { 149,-2068 }, { 150,-2068 }, { 151,-2068 }, { 152,-2068 },

 { 153,-2068 }, { 154,-2068 }, { 155,-2068 }, { 156,-2068 }, { 157,-2068 },
 { 158,-2068 }, { 159,-2068 }, { 160,-2068 }, { 161,-2068 }, { 162,-2068 },
 { 163,-2068 }, { 164,-2068 }, { 165,-2068 }, { 166,-2068 }, { 167,-2068 },
 { 168,-2068 }, { 169,-2068 }, { 170,-2068 }, { 171,-2068 }, { 172,-2068 },
 { 173,-2068 }, { 174,-2068 }, { 175,-2068 }, { 176,-2068 }, { 177,-2068 },
 { 178,-2068 }, { 179,-2068 }, { 180,-2068 }, { 181,-2068 }, { 182,-2068 },
 { 183,-2068 }, { 184,-2068 }, { 185,-2068 }, { 186,-2068 }, { 187,-2068 },
 { 188,-2068 }, { 189,-2068 }, { 190,-2068 }, { 191,-2068 }, { 192,-2068 },
 { 193,-2068 }, { 194,-2068 }, { 195,-2068 }, { 196,-2068 }, { 197,-2068 },
 { 198,-2068 }, { 199,-2068 }, { 200,-2068 }, { 201,-2068 }, { 202,-2068 },

 { 203,-2068 }, { 204,-2068 }, { 205,-2068 }, { 206,-2068 }, { 207,-2068 },
 { 208,-2068 }, { 209,-2068 }, { 210,-2068 }, { 211,-2068 }, { 212,-2068 },
 { 213,-2068 }, { 214,-2068 }, { 215,-2068 }, { 216,-2068 }, { 217,-2068 },
 { 218,-2068 }, { 219,-2068 }, { 220,-2068 }, { 221,-2068 }, { 222,-2068 },
 { 223,-2068 }, { 224,-2068 }, { 225,-2068 }, { 226,-2068 }, { 227,-2068 },
 { 228,-2068 }, { 229,-2068 }, { 230,-2068 }, { 231,-2068 }, { 232,-2068 },
 { 233,-2068 }, { 234,-2068 }, { 235,-2068 }, { 236,-2068 }, { 237,-2068 },
 { 238,-2068 }, { 239,-2068 }, { 240,-2068 }, { 241,-2068 }, { 242,-2068 },
 { 243,-2068 }, { 244,-2068 }, { 245,-2068 }, { 246,-2068 }, { 247,-2068 },
 { 248,-2068 }, { 249,-2068 }, { 250,-2068 }, { 251,-2068 }, { 252,-2068 },

 { 253,-2068 }, { 254,-2068 }, { 255,-2068 }, { 256,-2068 }, {   0,  55 },
 {   0,1091 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,1079 }, {   0,   0 }, {   0,1077 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,  54 }, {   0,1068 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,1055 }, {   0,   0 }, {   0,1053 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,  55 },
 {   0,1031 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 },
 {  70,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,1006 }, {   0,   0 }, {   0,   0 }, {  76,  24 }, {   0,   0 },
 {  76,  24 }, {   0,   0 }, {  69, 396 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 },
 { 100,   0 }, { 101,   0 }, { 102,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  46,-2105 }, {   0,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,  54 }, {   0, 972 },
 { 108,  24 }, {  85, 192 }, { 108,  24 }, {  85, 224 }, { 101, 396 },
 {  65,-2010 }, {  66,-1951 }, {  67,-2010 }, {  68,-2010 }, {  69,-1891 },
 {  70,-2010 }, {   0,   0 }, {  72,-2548 }, {  48, 366 }, {  49, 366 },
 {  50, 366 }, {  51, 366 }, {  52, 366 }, {  53, 366 }, {  54, 366 },
 {  55, 366 }, {  56, 366 }, {  57, 366 }, {   0,  55 }, {   0, 947 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, { 117, 192 }, {   0,   0 },
 { 117, 224 }, {   0,   0 }, {  97,-2010 }, {  98,-1951 }, {  99,-2010 },
 { 100,-2010 }, { 101,-1891 }, { 102,-2010 }, {   0,   0 }, { 104,-2548 },
 {   0,   0 }, {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-2069 },
 {  66,-2069 }, {  67,-2069 }, {  68,-2069 }, {  69,-2069 }, {  70,-2069 },
 {   0,   0 }, {  72,-2607 }, {  48,   0 }, {  49,   0 }, {  50,   0 },

 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {   0,  56 }, {   0, 888 }, {   0,   0 },
 {   0,   0 }, {   0, 885 }, {   0,  12 }, {   0, 883 }, {  65,   0 },
 {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 },
 {   9,   0 }, {  97,-2069 }, {  98,-2069 }, {  99,-2069 }, { 100,-2069 },
 { 101,-2069 }, { 102,-2069 }, {   0,   0 }, { 104,-2607 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0, 863 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  32,   0 }, {  36,-2653 },
 {   0,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 },

 { 101,   0 }, { 102,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48,-2653 }, {  49,-2653 }, {  50,-2653 }, {  51,-2653 },
 {  52,-2653 }, {  53,-2653 }, {  54,-2653 }, {  55,-2653 }, {  56,-2653 },
 {  57,-2653 }, {   0,   0 }, {   0, 829 }, {   0,   0 }, {   0, 827 },
 {   0,   0 }, {   0, 825 }, {   0,   0 }, {  65,-2653 }, {  66,-2653 },
 {  67,-2653 }, {  68,-2653 }, {  69,-2653 }, {  70,-2653 }, {  71,-2653 },
 {  72,-2653 }, {  73,-2653 }, {  74,-2653 }, {  75,-2653 }, {  76,-2653 },
 {  77,-2653 }, {  78,-2653 }, {  79,-2653 }, {  80,-2653 }, {  81,-2653 },
 {  82,-2653 }, {  83, 258 }, {  84,-2653 }, {  85,-2653 }, {  86,-2653 },
 {  87,-2653 }, {  88,-2653 }, {  89,-2653 }, {  90,-2653 }, {   0,   2 },

 {   0, 796 }, {  68,  36 }, {   0,   0 }, {  95,-2653 }, {   0,   0 },
 {  97,-2653 }, {  98,-2653 }, {  99,-2653 }, { 100,-2653 }, { 101,-2653 },
 { 102,-2653 }, { 103,-2653 }, { 104,-2653 }, { 105,-2653 }, { 106,-2653 },
 { 107,-2653 }, { 108,-2653 }, { 109,-2653 }, { 110,-2653 }, { 111,-2653 },
 { 112,-2653 }, { 113,-2653 }, { 114,-2653 }, { 115, 258 }, { 116,-2653 },
 { 117,-2653 }, { 118,-2653 }, { 119,-2653 }, { 120,-2653 }, { 121,-2653 },
 { 122,-2653 }, {   0,   0 }, {   0, 764 }, { 100,  36 }, {   0,   0 },
 {  68,   4 }, { 125,   2 }, {   0,   0 }, {  69,  31 }, {   0,   0 },
 {  69,  72 }, {   9, 258 }, {   0,   1 }, {   0, 753 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  32, 258 },
 {   0,   0 }, {   0,   0 }, { 100,   4 }, {   0,   0 }, {   0,   0 },
 { 101,  31 }, {   0,   0 }, { 101,  72 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  46, 382 }, {   0,   0 },
 {  48, 382 }, {  49, 382 }, {  50, 382 }, {  51, 382 }, {  52, 382 },
 {  53, 382 }, {  54, 382 }, {  55, 382 }, {  56, 382 }, {  57, 382 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65, 382 }, {  66, 382 }, {  67, 382 },

 {  68, 382 }, {  69, 382 }, {  70, 382 }, {  71, 382 }, {  72, 382 },
 {  73, 382 }, {  74, 382 }, {  75, 382 }, {  76, 382 }, {  77, 382 },
 {  78, 382 }, {  79, 382 }, {  80, 382 }, {  81, 382 }, {  82, 382 },
 {  83, 382 }, {  84, 382 }, {  85, 382 }, {  86, 382 }, {  87, 382 },
 {  88, 382 }, {  89, 382 }, {  90, 382 }, {   0,   0 }, {   0, 672 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  97, 382 },
 {  98, 382 }, {  99, 382 }, { 100, 382 }, { 101, 382 }, { 102, 382 },
 { 103, 382 }, { 104, 382 }, { 105, 382 }, { 106, 382 }, { 107, 382 },
 { 108, 382 }, { 109, 382 }, { 110, 382 }, { 111, 382 }, { 112, 382 },
 { 113, 382 }, { 114, 382 }, { 115, 382 }, { 116, 382 }, { 117, 382 },

 { 118, 382 }, { 119, 382 }, { 120, 382 }, { 121, 382 }, { 122, 382 },
 {   0,  54 }, {   0, 640 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   3 }, {   0, 630 }, {  43, 382 }, {   0,   0 }, {  45, 382 },
 {   0,   0 }, {   0,   0 }, {  48, 414 }, {  49, 414 }, {  50, 414 },
 {  51, 414 }, {  52, 414 }, {  53, 414 }, {  54, 414 }, {  55, 414 },
 {  56, 414 }, {  57, 414 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  36,-2911 }, {   0,   0 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {  48,-2911 },
 {  49,-2911 }, {  50,-2911 }, {  51,-2911 }, {  52,-2911 }, {  53,-2911 },
 {  54,-2911 }, {  55,-2911 }, {  56,-2911 }, {  57,-2911 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,-2911 }, {  66,-2911 }, {  67,-2911 }, {  68,-2911 },
 {  69,-2911 }, {  70,-2911 }, {  71,-2911 }, {  72,-2911 }, {  73,-2911 },
 {  74,-2911 }, {  75,-2911 }, {  76,-2911 }, {  77,-2911 }, {  78,-2911 },
 {  79,-2911 }, {  80,-2911 }, {  81,-2911 }, {  82,-2911 }, {  83,-2911 },

 {  84,-2911 }, {  85,-2911 }, {  86,-2911 }, {  87,-2911 }, {  88,-2911 },
 {  89,-2911 }, {  90,-2911 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  95,-2911 }, {   0,   0 }, {  97,-2911 }, {  98,-2911 },
 {  99,-2911 }, { 100,-2911 }, { 101,-2911 }, { 102,-2911 }, { 103,-2911 },
 { 104,-2911 }, { 105,-2911 }, { 106,-2911 }, { 107,-2911 }, { 108,-2911 },
 { 109,-2911 }, { 110,-2911 }, { 111,-2911 }, { 112,-2911 }, { 113,-2911 },
 { 114,-2911 }, { 115,-2911 }, { 116,-2911 }, { 117,-2911 }, { 118,-2911 },
 { 119,-2911 }, { 120,-2911 }, { 121,-2911 }, { 122,-2911 }, {   0,   0 },
 {   0, 506 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   9,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  32,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  46, 124 }, {   0,   0 }, {  48, 124 }, {  49, 124 },
 {  50, 124 }, {  51, 124 }, {  52, 124 }, {  53, 124 }, {  54, 124 },
 {  55, 124 }, {  56, 124 }, {  57, 124 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65, 124 }, {  66, 124 }, {  67, 124 }, {  68, 124 }, {  69, 124 },
 {  70, 124 }, {  71, 124 }, {  72, 124 }, {  73, 124 }, {  74, 124 },
 {  75, 124 }, {  76, 124 }, {  77, 124 }, {  78, 124 }, {  79, 124 },
 {  80, 124 }, {  81, 124 }, {  82, 124 }, {  83, 124 }, {  84, 124 },
 {  85, 124 }, {  86, 124 }, {  87, 124 }, {  88, 124 }, {  89, 124 },
 {  90, 124 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  97, 124 }, {  98, 124 }, {  99, 124 },
 { 100, 124 }, { 101, 124 }, { 102, 124 }, { 103, 124 }, { 104, 124 },
 { 105, 124 }, { 106, 124 }, { 107, 124 }, { 108, 124 }, { 109, 124 },

 { 110, 124 }, { 111, 124 }, { 112, 124 }, { 113, 124 }, { 114, 124 },
 { 115, 124 }, { 116, 124 }, { 117, 124 }, { 118, 124 }, { 119, 124 },
 { 120, 124 }, { 121, 124 }, { 122, 124 }, {   0,   0 }, {   0, 382 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   9,-503 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  32,-503 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  46,   0 }, {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,   0 },
 {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 },
 {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 },
 {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 },
 {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 },

 {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 },
 {   0,   0 }, {   0, 290 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 },
 { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 },
 { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 },
 { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 },
 { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 },
 { 121,   0 }, { 122,   0 }, {   0,  54 }, {   0, 258 }, { 125,-501 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,  32 },
 {  49,  32 }, {  50,  32 }, {  51,  32 }, {  52,  32 }, {  53,  32 },
 {  54,  32 }, {  55,  32 }, {  56,  32 }, {  57,  32 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 { 257,  62 }, {   1,   0 },    };

static yyconst struct yy_trans_info *yy_start_state_list[7] =
    {
    &yy_transition[1],
    &yy_transition[3],
    &yy_transition[261],
    &yy_transition[519],
    &yy_transition[777],
    &yy_transition[1035],
    &yy_transition[1293],

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lex.l"
#line 2 "lex.l"

#include "token.h"
#include "util.h"

#ifdef _WIN32
#include <io.h>
#define FILE_SEP "\\"
#else
#include <unistd.h>
#define FILE_SEP "/"
#endif

#define yywrap() 1
#define YY_SKIP_YYWRAP 1

#define YY_NO_UNPUT 1

// Some static data definition

static char *file_name;                  
static int line, pos;    // Token position
extern char *i_path;

struct scan_state { 
    int             pos;
    int             line;
    char*           file_name;
    char*           search_path; 
    FILE*           input;
    YY_BUFFER_STATE buffer; 
};

#define MAX_INCLUDE_DEPTH 256   // Include stack depth
#define MAX_ID_LENGTH     256

class scan_ctx { 
  protected: 
    scan_state      stack[ MAX_INCLUDE_DEPTH ];
    int             sp;

  public:
    void push();
    void attach(char* name, FILE* in);
    void pop(); 
    bool empty() { return sp == 0; }
    bool find(char* name) ; 
    scan_ctx() { sp = 0; }
};
    
static scan_ctx scanner; 
static int type_or_var_context;


void scanner_input(char *file) 
{
    FILE* f = fopen (file, "r");
	
    if (f == NULL) { 
	error("can't open input source file: %s", file); 
    }
    scanner.attach(file, f);
}


// Hints for macro functionality (inherited from rtl2c)
static nm_entry *nm = NULL;	       // Token name
static char *text   = NULL;            // Token text if != NULL

static int include_level;

class use_ctx { 
  public:
    char* fname;
    use_ctx* next;
    
    use_ctx(char* name, use_ctx* chain) { 
	fname = name;
	next = chain;
    }
};

static use_ctx* use_chain;

#undef  ECHO
#define ECHO 

// Token generator function

int tkn (int tag) {
   curr_token = new token(text ? text : strdup(yytext),
			  tag, line, pos, nm);
   nm = NULL; text = NULL;
   for (char *c = yytext; *c != 0; c++) {
       if (*c == '\n') { line++; pos = 0; }
       else if (*c == '\t') { pos += TAB_WIDTH - (pos % TAB_WIDTH); }
       else pos++;
   }
   curr_token->fname = file_name; 
   if (include_level > 0) { 
       curr_token->attr |= token::from_include_file;
   }
   return 1;
}



// Include file name processing

static char *include_name (char *src) {
    char *t;
    char *name = new char[strlen(src)+8]; 
    char *dst = name;
    if (strchr(src, '\n') != NULL) { 
        line += 1;
        pos = 0;
    }
    while (*src == '\'' || isspace(*src)) src++;        // Skip leading '[ ]
    if ((t = strchr (src, '[')) != NULL) {
#if 0
        int gid, uid, n;
        if (sscanf(t, "[%d,%d]%n", &gid, &uid, &n) == 2) { 
            dst += sprintf(dst, "../%03d%03d/", gid, uid);
	    src = t + n;
        } 
	else 
#endif
	{ 
	    if ((t = strrchr(src, ']')) != NULL) { 
	        src = t+1;
            }
        }
    }	   
    bool suffix = FALSE;
    while(*src && !isspace(*src) && *src != ';' && *src != '\'' 
          && *src!='\n' && *src != '}')
    {
        if (*src == '.') suffix = TRUE;
	*dst++ = tolower(*(unsigned char*)src++); 
    } 
    *dst = 0;
    if (!suffix) strcpy(dst, ".pas");
 
    if (scanner.find(name)) {
	error(line, pos, file_name, "file %s already included !\n", name); 
    }
    return name; 
}

static int yyinput(void);

inline int yyinput_file() { 
    int ch = yyinput(); 
    if (ch == '\n') { line++; pos = 0; }
    else if (ch == '\t') { pos += TAB_WIDTH - (pos % TAB_WIDTH); }
    else pos++;
    return ch;
}     

static int process_end_of_line_comment() { 
    char cmt_buf[1024];
    char* p = cmt_buf;
    int c;
    *p++ = '\\';
    *p++ = '\\';
    while((c = yyinput_file()) != EOF) {  
        if (c == '\n') {
           *p = '\0';
           curr_token = new token(NULL, TKN_CMNT, line, pos);
           curr_token->in_text = curr_token->out_text = strdup(cmt_buf);
           return 1;
        } else { 
           *p++ = (char)c;
        }
    }
    error(line, pos, file_name, "EOF in comment !\n");
    return -1;
}

static int process_comments() { 
    static int cmt_buf_len = 256;
    static char* cmt_buf = new char[cmt_buf_len];
    int c, pc = 0;
    char *p = cmt_buf;
    char cmt_start = *yytext;
    *p++ = '/';
    *p++ = '*';

    curr_token = new token(NULL, TKN_CMNT, line, pos);

    pos += strlen(yytext);

    if (nested_comments) { 
	while((c = yyinput_file()) != EOF) {  
	    if (c == '/' && pc == '*') c = ' ';  
	    if (p == cmt_buf + cmt_buf_len) {
		cmt_buf = (char*)realloc(cmt_buf, 2*cmt_buf_len);
		p = cmt_buf + cmt_buf_len;
		cmt_buf_len *= 2;
	    }
	    if ((cmt_start == '{' && c == '}') || 
		(cmt_start == '(' && c == ')' && pc == '*')) 
            { 
		size_t len = p - cmt_buf;
		char* cmt_text = new char[len + 3];
		memcpy(cmt_text, cmt_buf, len);      
		if (pc != '*') cmt_text[len++] = '*';
		cmt_text[len++] = '/';
		cmt_text[len] = '\0';
                if (turbo_pascal && cmt_text[2] == '$') { 
                   *p = '\0';
                   if (strincmp(cmt_text+3, "IFDEF", 5) == 0) { 
                      sprintf(cmt_text, "#ifdef %s", cmt_buf+9);
                   } else if (strincmp(cmt_text+3, "ELSE", 4) == 0) { 
                      sprintf(cmt_text, "#else");
                   } else if (strincmp(cmt_text+3, "ENDIF", 5) == 0) { 
                      sprintf(cmt_text, "#endif");
                   } else if (strincmp(cmt_text+3, "IFNDEF", 6) == 0) { 
                      sprintf(cmt_text, "#ifndef %s", cmt_buf+10);
                   } else if (strincmp(cmt_text+3, "DEFINE", 6) == 0) { 
                      sprintf(cmt_text, "#define %s", cmt_buf+10);
                   } else if (strincmp(cmt_text+3, "IFOPT", 5) == 0) { 
		      int value = 1;
                      char* p = strchr(cmt_text+8, '+');
		      if (p != NULL) *p = '\0';
		      else if ((p = strchr(cmt_text+8, '-')) != NULL) { 
			value = 0;
			*p = '\0';
		      }
		      for (p = cmt_buf+8; *p == ' '; p++);
                      sprintf(cmt_text, "#if OPTION_%s == %d", 
			      p, value);
                   } 
                }
		curr_token->in_text = curr_token->out_text = cmt_text;
		return 1;
	    } 
	    *p++ = pc = c;
	}
    } else {  
	while((c = yyinput_file()) != EOF) {  
	    if (c == '/' && pc == '*') c = ' ';  
	    if (p == cmt_buf + cmt_buf_len) {
		cmt_buf = (char*)realloc(cmt_buf, 2*cmt_buf_len);
		p = cmt_buf + cmt_buf_len;
		cmt_buf_len *= 2;
	    }
	    if (c == '}' || (c == ')' && pc == '*')) { 
		size_t len = p - cmt_buf;
		char* cmt_text = new char[len + 3];
		memcpy(cmt_text, cmt_buf, len);      
		if (pc != '*') cmt_text[len++] = '*';
		cmt_text[len++] = '/';
		cmt_text[len] = '\0';
		curr_token->in_text = curr_token->out_text = cmt_text;
		return 1;
	    } 
	    *p++ = pc = c;
	}
    }
    error(line, pos, file_name, "EOF in comment !\n");
    return -1;
}

/* the "incl" state is used for picking up the name
 * of an include file
 */


#line 2154 "lex.yy.c"

#define INITIAL 0
#define incl 1
#define use 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	errno=0; \
	while ( (result = read( fileno(yyin), (char *) buf, max_size )) < 0 ) \
	{ \
		if( errno != EINTR) \
		{ \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
			break; \
		} \
		errno=0; \
		clearerr(yyin); \
	}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 289 "lex.l"


#line 2325 "lex.yy.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start_state_list[(yy_start)];
yy_match:
		{
		register yyconst struct yy_trans_info *yy_trans_info;

		register YY_CHAR yy_c;

		for ( yy_c = YY_SC_TO_UI(*yy_cp);
		      (yy_trans_info = &yy_current_state[(unsigned int) yy_c])->
		yy_verify == yy_c;
		      yy_c = YY_SC_TO_UI(*++yy_cp) )
			{
			yy_current_state += yy_trans_info->yy_nxt;

			if ( yy_current_state[-1].yy_nxt )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			}
		}

yy_find_action:
		yy_act = yy_current_state[-1].yy_nxt;

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos) + 1;
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 291 "lex.l"
BEGIN(incl);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 292 "lex.l"
BEGIN(incl);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 293 "lex.l"
BEGIN(use); /* Turbo Pascal */
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 295 "lex.l"
{  /* skip whitespaces */
    char* p = yytext; 
    while(*p != '\0') { 
	if (*p++ == '\n') line += 1; 
    } 
}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 302 "lex.l"
{ /* skip comments */
    char* p = yytext; 
    while(*p != '\0') { 
	if (*p++ == '\n') line += 1; 
    } 
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 309 "lex.l"
{ 
                  /* got the include file name */
    char *fname = dprintf("%s.pas", yytext);
    for (char* p = fname; *p != '\0'; p++) *p = tolower(*p);

    use_ctx* up;
    for (up = use_chain; 
	 up != NULL && strcmp(fname, up->fname) != 0; 
	 up = up->next);
	    
    if (up == NULL) { 
        char *xname;
        FILE *in = NULL;
        char *try_dir, *next_dir;
        int dir_length;
   
	for (try_dir = i_path; try_dir != NULL; try_dir = next_dir) {
	    if ((next_dir = strchr (try_dir, path_sep)) != NULL ) {
		dir_length = next_dir - try_dir;
		next_dir++; 
	    } else {
		dir_length = strlen (try_dir);
	    }
	    xname = dprintf ("%.*s" FILE_SEP "%s", dir_length, try_dir, fname);
	    if ((in = fopen(xname, "r")) != NULL) {
		use_chain = new use_ctx(fname, use_chain);
		curr_token = new token(xname, TKN_PUSH_UNIT);
		curr_token->out_text = fname; 
		include_level += 1;
		BEGIN(INITIAL);     // To leave include state
		scanner.push();
		scanner.attach(xname, in);
		return 1;
	    }
	}
	warning(line, pos, file_name, "can't include file %s", fname);
        curr_token = new token(dprintf("/*#include \"%s.h\"*/\n", yytext),
	                       TKN_CMNT, line, pos);
    } else { 
        curr_token = new token(dprintf("#include \"%s.h\"\n", yytext),
	                       TKN_CMNT, line, pos);
    } 
    return 1;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 353 "lex.l"
{
    BEGIN(INITIAL);     // To leave include state
}    
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 358 "lex.l"
{ 
    error(line, pos, file_name, "unrecognized token: %s\n",
		yytext); 
}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 366 "lex.l"
{  /* eat the whitespace */
    char* p = yytext; 
    while(*p != '\0') { 
	if (*p++ == '\n') line += 1; 
    } 
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 372 "lex.l"
{ 
                  /* got the include file name */
    BEGIN(INITIAL);     // To leave include state
    
    char *fname = include_name (yytext);
    char *xname;
    FILE *in = NULL;
    char *try_dir, *next_dir;
    int dir_length;
    
    for (try_dir = i_path; try_dir != NULL; try_dir = next_dir) {
	if ((next_dir = strchr (try_dir, path_sep)) != NULL ) {
	    dir_length = next_dir - try_dir;
	    next_dir++; 
	} else {
	    dir_length = strlen (try_dir);
	}
	xname = dprintf ("%.*s" FILE_SEP "%s", dir_length, try_dir, fname);
	if ((in = fopen(xname, "r")) != NULL) {
	    include_level += 1;
	    scanner.push();
	    scanner.attach(xname, in);
	    curr_token = new token(xname, TKN_PUSH_FILE);
	    curr_token->out_text = fname; 
	    return 1;
	}
    }
    warning(line, pos, file_name, "can't include file %s", fname);
    curr_token = new token(dprintf("/*#include \"%s\"*/", fname),
	                   TKN_CMNT, line, pos);
    return 1;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 405 "lex.l"
{ 
    error(line, pos, file_name, "unrecognized token: %s\n",
		yytext); 
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 410 "lex.l"
{
    char *fname = include_name (yytext+3);
    char *xname;
    FILE *in = NULL;
    char *try_dir, *next_dir;
    int dir_length;
    
    for (try_dir = i_path; try_dir != NULL; try_dir = next_dir) {
	if ((next_dir = strchr (try_dir, path_sep)) != NULL ) {
	    dir_length = next_dir - try_dir;
	    next_dir++; 
	} else {
	    dir_length = strlen (try_dir);
	}
	xname = dprintf ("%.*s" FILE_SEP "%s", dir_length, try_dir, fname);
	if ((in = fopen(xname, "r")) != NULL) {
	    include_level += 1;
	    scanner.push();
	    scanner.attach(xname, in);
	    curr_token = new token(xname, TKN_PUSH_FILE);
	    curr_token->out_text = fname; 
	    return 1;
	}
    }
    warning(line, pos, file_name, "can't include file %s", fname);
    curr_token = new token(dprintf("/*#include \"%s\"*/", fname),
	                   TKN_CMNT, line, pos);
    return 1;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(incl):
case YY_STATE_EOF(use):
#line 440 "lex.l"
{
    if (scanner.empty()) { 
	return -1;  // MAGIC ! (< 0 means end of files)
    } else {
	scanner.pop();
	include_level -= 1;
	curr_token =  new token((char*)NULL, TKN_POP_FILE);
	return 1;
    }
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 451 "lex.l"
{ return process_end_of_line_comment(); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 452 "lex.l"
{ return process_comments(); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 453 "lex.l"
{ return process_comments(); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 454 "lex.l"
{ return process_comments(); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 456 "lex.l"
{ return tkn(TKN_LPAR); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 457 "lex.l"
{ return tkn(TKN_RPAR); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 458 "lex.l"
{ text = "["; return tkn(TKN_LBR);  }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 459 "lex.l"
{ text = "]"; return tkn(TKN_RBR);  }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 460 "lex.l"
{ return tkn(TKN_LBR);  }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 461 "lex.l"
{ return tkn(TKN_RBR);  }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 462 "lex.l"
{ return tkn(TKN_MUL);  }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 463 "lex.l"
{ return tkn(TKN_PLUS); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 464 "lex.l"
{ return tkn(TKN_MINUS);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 465 "lex.l"
{ return tkn(TKN_C_SHR); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 466 "lex.l"
{ return tkn(TKN_C_SHL);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 467 "lex.l"
{ return tkn(TKN_C_AND);}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 468 "lex.l"
{ return tkn(TKN_C_OR);}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 469 "lex.l"
{ return tkn(TKN_LETMUL);  }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 470 "lex.l"
{ return tkn(TKN_LETADD); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 471 "lex.l"
{ return tkn(TKN_LETSUB);}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 472 "lex.l"
{ return tkn(TKN_LETSHR); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 473 "lex.l"
{ return tkn(TKN_LETSHL);}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 474 "lex.l"
{ return tkn(TKN_LETAND);}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 475 "lex.l"
{ return tkn(TKN_LETOR);}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 476 "lex.l"
{ return tkn(TKN_LETDIV);}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 477 "lex.l"
{ return tkn(TKN_C_NOT);}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 478 "lex.l"
{ return tkn(TKN_COMMA);}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 479 "lex.l"
{ return tkn(TKN_DOT);  }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 480 "lex.l"
{ return tkn(TKN_DOTS); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 481 "lex.l"
{ return tkn(TKN_DIVR);  }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 482 "lex.l"
{ return turbo_pascal ? tkn(TKN_ADDR) : tkn(TKN_HEAP); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 483 "lex.l"
{ if (turbo_pascal && !type_or_var_context
		  && curr_token->tag != TKN_HEAP 
                  && curr_token->tag != TKN_RBR && curr_token->tag != TKN_RPAR
		  && curr_token->tag != TKN_REF 
		  && curr_token->tag != TKN_IDENT
		  && curr_token->cat != CAT_ID) 
               { 
		   text = dprintf("#%d", yyinput() & 31);
		   return tkn(TKN_SCONST);
              }
	      return tkn(TKN_HEAP); 
            }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 495 "lex.l"
{ return tkn(TKN_LET);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 496 "lex.l"
{ return tkn(TKN_COLON);}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 497 "lex.l"
{ return tkn(TKN_SEMICOLON); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 498 "lex.l"
{ return tkn(TKN_LE);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 499 "lex.l"
{ return tkn(TKN_GE);  }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 500 "lex.l"
{ return tkn(TKN_LT);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 501 "lex.l"
{ return tkn(TKN_GT);  }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 502 "lex.l"
{ return tkn(TKN_EQ);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 503 "lex.l"
{ return tkn(TKN_NE);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 506 "lex.l"
{ return tkn(TKN_RCONST); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 507 "lex.l"
{ return tkn(TKN_ICONST);  } 
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 509 "lex.l"
{ 
               char lc_buf[MAX_ID_LENGTH];
	       char *src = yytext, *dst = lc_buf; 
	       if (*yytext == '$') { 
                   if (turbo_pascal) { /* hexademical number */
  	               return tkn(TKN_ICONST);
                   } else if (ignore_preprocessor_directives) { 
                       int c;
                       char cmt_buffer[1024];
                       int i = sprintf(cmt_buffer, "/*%s", yytext);
                       curr_token = new token(NULL, TKN_CMNT, line, pos);
                       pos += strlen(yytext);
 	               while((c = yyinput_file()) != EOF && c != '\n') {  
                             if (i == (int)sizeof(cmt_buffer)-4) { 
                                 error(line, pos, file_name, "Preprocessor directive too long\n");
                             } else {                      
                                 cmt_buffer[i++] = (char)c;
                             }
                        }
                        cmt_buffer[i++] = '*';
                        cmt_buffer[i++] = '/';
                        cmt_buffer[i++] = '\n';
                        cmt_buffer[i++] = '\0';
               		char* cmt_text = new char[i];
		        memcpy(cmt_text, cmt_buffer, i);      
                        curr_token->in_text = curr_token->out_text = cmt_text;
                        return 1;
                   }
 	       }
	       do { 
	           *dst++ = tolower(*(unsigned char*)src);
	       } while (*src++);
	       nm = nm_entry::add(lc_buf, TKN_IDENT);
	       int tag = nm->tag;
	       
	       if (turbo_pascal) { 
	           if (tag == TKN_TYPE || tag == TKN_VAR) { 
		       type_or_var_context = TRUE;
	           } else if (tag == TKN_BEGIN || tag == TKN_CONST) { 
		       type_or_var_context = FALSE;
		   } else if (tag == TKN_IMPLEMENTATION) { 
		       if (include_level > 0)  { 
		           scanner.pop();
		           include_level -= 1;
			   BEGIN(use);
			   curr_token = new token((char*)NULL, TKN_UNIT_END);
                           return 1;
                       } else { 
		           return tkn(TKN_IMPLEMENTATION);
                       }
		   } else if (tag == TKN_INTERFACE) { 
                       if (use_chain == NULL) { 
                           use_chain = new use_ctx(file_name, NULL);
                       }
		       tkn(TKN_INTERFACE);
		       return 1;
		   }
               } 
	       if (tag == TKN_RESERVED) { 
	           text = dprintf("%s_", lc_buf);      
	           nm = nm_entry::add(text, TKN_IDENT); 
	           tag = TKN_IDENT;
	       } else if (!preserve_case || tag != TKN_IDENT) { 
	           text = strdup(lc_buf);
	       }
	       return tkn(tag);
             }  
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 578 "lex.l"
{ return tkn(TKN_SCONST); }  
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 580 "lex.l"
{ return tkn(TKN_SPACE); }   
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 582 "lex.l"
{ return tkn(TKN_LN); } 
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 584 "lex.l"
{ 
                error(line, pos, file_name, "unrecognized token: %s\n",
		      yytext); 
             }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 589 "lex.l"
ECHO;
	YY_BREAK
#line 2933 "lex.yy.c"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = yy_start_state_list[(yy_start)];

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		yy_current_state += yy_current_state[(*yy_cp ? YY_SC_TO_UI(*yy_cp) : 256)].yy_nxt;
		if ( yy_current_state[-1].yy_nxt )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register int yy_c = 256;
	register yyconst struct yy_trans_info *yy_trans_info;

	yy_trans_info = &yy_current_state[(unsigned int) yy_c];
	yy_current_state += yy_trans_info->yy_nxt;
	yy_is_jam = (yy_trans_info->yy_verify != yy_c);

	if ( ! yy_is_jam )
		{
		if ( yy_current_state[-1].yy_nxt )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 589 "lex.l"



void scan_ctx::push() { 
    assert(sp < MAX_INCLUDE_DEPTH);
    stack[sp].file_name = file_name;
    stack[sp].buffer = YY_CURRENT_BUFFER;
    stack[sp].search_path = i_path;
    stack[sp].pos = pos;
    stack[sp].line = line;
    stack[sp].input = yyin;
    sp += 1;
}


void scan_ctx::attach(char* name, FILE* in) { 
    pos = 0;
    line = 1;
    file_name = name;
    yyin = in;
    char* base_name = strrchr(name, PATH_SEP);
    if (base_name != NULL) { 
	i_path = dprintf("%.*s%c%s", base_name-name, name, path_sep, i_path);
    }
    yy_switch_to_buffer(yy_create_buffer(yyin,YY_BUF_SIZE));
}

void scan_ctx::pop() { 
    assert(sp > 0);
    sp -= 1;
    pos = stack[sp].pos;
    line = stack[sp].line;
    file_name = stack[sp].file_name;
    fclose(yyin);
    yyin = stack[sp].input;
    i_path = stack[sp].search_path;
    yy_switch_to_buffer(stack[sp].buffer);
}

bool scan_ctx::find(char* name) { 
    for (int i = 0; i < sp; i ++ ) { 
	if (strcmp(stack[i].file_name, name) == 0) { 
	    return TRUE;
	}
    }
    return FALSE;
}


